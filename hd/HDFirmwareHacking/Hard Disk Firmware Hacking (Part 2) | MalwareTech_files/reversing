// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549"},"updated":{"$t":"2015-06-19T06:30:59.308-07:00"},"category":[{"term":"malware"},{"term":"security"},{"term":"programming"},{"term":"news"},{"term":"reversing"},{"term":"windows internals"},{"term":"bootkits"},{"term":"hacking"},{"term":"tutorials"},{"term":"botnets"},{"term":"electronics"},{"term":"exploits"},{"term":"forensics"},{"term":"rovnix"},{"term":"ms14-066"},{"term":"tor"},{"term":"DDoS"},{"term":"bitcoin"},{"term":"darkode"},{"term":"irc"},{"term":"ransomware"},{"term":"sandboxing"},{"term":"uac elevation"}],"title":{"type":"text","$t":"MalwareTech"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/-\/reversing?alt=json-in-script\u0026max-results=8"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/search\/label\/reversing"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/-\/reversing\/-\/reversing?alt=json-in-script\u0026start-index=9\u0026max-results=8"}],"author":[{"name":{"$t":"Malware Tech"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"15"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"8"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-3295817836015559749"},"published":{"$t":"2015-05-18T08:37:00.000-07:00"},"updated":{"$t":"2015-05-18T08:42:48.992-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Final)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: left;\"\u003ECore 2, I choose you.\u003C\/h2\u003E\u003Cdiv\u003ELess than 5 minutes after posting the last article, i discovered the final piece of my puzzle: a second CPU core. I was looking through my OpenOCD configuration when I realized it had a single tap definition hardcoded, so i decided to comment it out and let OpenOCD try to automatically discover the taps.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-KqXM-uyoijU\/VVYPnMPzkRI\/AAAAAAAABGc\/Lcok5MfTx-g\/s1600\/AutoTAP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"384\" src=\"http:\/\/1.bp.blogspot.com\/-KqXM-uyoijU\/VVYPnMPzkRI\/AAAAAAAABGc\/Lcok5MfTx-g\/s640\/AutoTAP.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAuto probing found two TAPs with the same id, which I assumed to be two different cores, so I updated my config accordingly.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003EHere's a new config designed to work with both cores:\u003C\/div\u003E\u003Cdiv\u003E\u003Cblockquote class=\"tr_bq\"\u003Etransport select jtag\u003Cbr \/\u003Eadapter_khz 100\u003Cbr \/\u003E\u003Cbr \/\u003Ejtag newtap auto0 tap -irlen 4 -expected-id 0x121003d3\u003Cbr \/\u003Ejtag newtap auto1 tap -irlen 4 -expected-id 0x121003d3\u003Cbr \/\u003E\u003Cbr \/\u003Etarget create auto0.tap feroceon -endian little -chain-position auto0.tap\u003Cbr \/\u003Etarget create auto1.tap feroceon -endian little -chain-position auto1.tap\u003Cbr \/\u003E\u003Cbr \/\u003Ereset_config srst_only\u003Cbr \/\u003Eadapter_nsrst_delay 200\u003Cbr \/\u003Ejtag_ntrst_delay 200\u003C\/blockquote\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter a few small adjustments, all that was left to do was run OpenOCD and see what secrets the new core holds.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-GDbooLOU5Mc\/VVn4vmDYzjI\/AAAAAAAABGw\/5O8ba-hOxSw\/s1600\/KernelBreakpoint.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"300\" src=\"http:\/\/1.bp.blogspot.com\/-GDbooLOU5Mc\/VVn4vmDYzjI\/AAAAAAAABGw\/5O8ba-hOxSw\/s640\/KernelBreakpoint.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOnce I'd connected to the JTAG via IDA, everything was clear. I could see that the second core was stopped on the breakpoint I'd written to the flash chip. This was the core responsible for loading and executing the bootloader, whilst the core I had been looking at before just waits in a loop. Obviously the bootstrap code must be different for core 2, because the other bootstrap just loops until a later time.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-gamTWQmYXEc\/VVn_gQ8oPMI\/AAAAAAAABHA\/HbXdTsp21aU\/s1600\/Bootstrap2.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/1.bp.blogspot.com\/-gamTWQmYXEc\/VVn_gQ8oPMI\/AAAAAAAABHA\/HbXdTsp21aU\/s640\/Bootstrap2.png\" width=\"518\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003EIt's clear that core 1's bootstrap is just debugging \/ management code, whilst core 2 has a completely separate region of code mapped to the same address. Core 2 not only loads the bootloader from the flash, but also appears responsible for most of the interesting operations such as handling SATA requests and writing the cache descriptor.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EConclusion\u003C\/h2\u003E\u003Cdiv\u003ESo there you have it, using very little experience I was able to JTAG a WD hard disk, dump the firmware, and even discover how to read \/ write the flash chip using ICP. I'm definitely going to spend some more time poking about in the firmware to see how parts of it work, but because that's outside the scope of these articles, and to avoid boring people, this will be the last article of the series. If I manage anything interesting, I will likely post my findings in a whitepaper and upload it alongside a demo video.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI'd like to continue posting both hardware and software articles (and some tutorial), so if you have any suggestions for either, send them to admin@malwaretech.com.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EHope you've enjoyed a slightly different style of writing and learned something new.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/3295817836015559749\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html#comment-form","title":"8 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3295817836015559749"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3295817836015559749"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html","title":"Hard Disk Firmware Hacking (Final)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-KqXM-uyoijU\/VVYPnMPzkRI\/AAAAAAAABGc\/Lcok5MfTx-g\/s72-c\/AutoTAP.png","height":"72","width":"72"},"thr$total":{"$t":"8"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-828040756229904941"},"published":{"$t":"2015-05-12T05:10:00.000-07:00"},"updated":{"$t":"2015-05-18T08:39:19.590-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 5)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\"Discovery requires experimentation\"\u003C\/h2\u003E\u003Cdiv\u003EThis weekend I made a pretty big breakthrough which lead to me making a few smaller breakthroughs and ultimately negating most of my previous research. I've also learned that \"not reinventing the wheel\" isn't always the best option, especially when it comes to trusting other people's research.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOne of the main goals was to find a way to quickly and easily reprogram the hard disk, given physical access. In the\u0026nbsp;\u003Ca href=\"https:\/\/spritesmods.com\/?art=hddhack\u0026amp;page=5\"\u003Espritesmods\u003C\/a\u003E\u0026nbsp;post he had remove the flash chip from the PCB and attached it to some veroboard, so he could swap it between the hard disk and the flash programmer. Obviously it's not very practical for me to have to keep disconnecting and reconnecting the flash chip, and especially impractical for an adversary looking to quickly infect a disk.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAs most already know, it is possible to flash WD hard disk firmware from within the OS as long as the account has Admin\/Root privileges. The disk must be running in order to accept SATA commands and must be restarted to load the new firmware. If the new firmware has errors the disk cannot start, therefore the firmware cannot be fixed (this is known as bricking). Due to the fact I'm hacking about with the firmware I'm likely to brick the device, so i needed another way of flashing it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EIn-Circuit Programming\u003C\/h2\u003E\u003Cdiv\u003EIn circuit Programming (ICP) is the ability to program a flash chip or other component, while it's still connected to the circuit. In the last article I was able to find the test ports that connected to the flash chip, but was unable to program it, however; after some experimentation over the weekend I finally managed to achieve ICP.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EThe Problem\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EOne of the biggest problems with ICP is that in order to write the flash chip you need to power it, but because it's connected to the rest of the circuit you end up powering other chips, which send data on various buses and interfere with your attempts to talk to the flash.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003ETo prevent interference on the SPI bus, it's usually enough to hold down the reset button or short the reset signal to ground, resulting in the system being held in reset and unable to start (giving you uninterrupted access to the flash's bus).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EHere's a list of what I'd tried.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EPowering the flash directly with 3.3v supply\u003C\/li\u003E\u003Cli\u003EPowering the flash directly with 3.3v supply while holding the system in reset\u003C\/li\u003E\u003Cli\u003EPowering the entire system by plugging in the HD\u003C\/li\u003E\u003Cli\u003EPowering the entire system by plugging in the HD while holding the system in reset\u003C\/li\u003E\u003C\/ul\u003E\u003C\/div\u003E\u003Cdiv\u003EI was ready to give up as nothing was clearly working (my SPI programmer couldn't so much as detect the flash chip), but on Saturday I decided to have one last go, and it worked straight away (sort of).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-CwG7cjSp_xs\/VVHX3ppQ8II\/AAAAAAAABF4\/D6-HkjFg2mw\/s1600\/flashrom.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"340\" src=\"http:\/\/4.bp.blogspot.com\/-CwG7cjSp_xs\/VVHX3ppQ8II\/AAAAAAAABF4\/D6-HkjFg2mw\/s640\/flashrom.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe SPI programmer was able to detect the flash chip, but most of the data being read was erroneous. On investigation I found that the VCC (power) wire had come unstuck from the test point and was now hanging off the desk. So if the VCC wire wasn't connected and the system wasn't plugged in, how was it reading the flash chip?\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter more experimentation I found that the circuit was set up in such a way that some of the voltage being sent to the MISO pin (about 1.2v of it) was somehow feeding back onto the VCC rail and powering the chip....wat. As I've said I'm not an electronics expert, and this had me completely baffled, but it also showed me that reading the chip in circuit was possible, i just needed to learn its secrets.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EThe Solution\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter extensively more experimentation with a side order of experimentation and failure, I found that holding the system in reset (the solution to most ICP problems) was actually the only issue. I had been leaving the JTAG connected to the system and it was pulling the reset pin low (holding it in reset), so when I wasn't holding the system in reset the JTAG was. After disconnecting the SRST (reset) pin of the JTAG, everything worked perfectly as long as the disk wasn't plugged in and I powered the flash chip directly. It seems that this system is designed for ICP to be done without holding it in reset and doing so causes issues.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv\u003EHere is the updated image from the last article.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Wd8fhDBYNxA\/VVHTfkbxxeI\/AAAAAAAABFo\/-uNjbNSQ4W8\/s1600\/ICP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"622\" src=\"http:\/\/3.bp.blogspot.com\/-Wd8fhDBYNxA\/VVHTfkbxxeI\/AAAAAAAABFo\/-uNjbNSQ4W8\/s640\/ICP.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIf you have a USB device which allows for SPI programming and is supported by \"flashrom\", like I do. You can connect it to the computer and use flashrom to read, write, and erase the flash. The TUMPA is an especially nice board because it has 2 channels, so you don't have to disconnect the JTAG to use SPI.\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003C\/h2\u003E\u003Ch2 style=\"text-align: left;\"\u003EDon't reinvent the wheel they said, It's a waste of time they said\u003C\/h2\u003E\u003Cdiv\u003EBefore i started hacking I'd decided to read other people's research to get a good idea of where to start. Resourceful, right? Well it actually turns out that most of the research I've based mine on was either wrong or just doesn't apply to this hard disk.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI was under the impression that when connecting the JTAG and issuing a \"reset halt\" command, the system would be halted before any code was run, and I could step through the bootstrap while it read the bootloader from flash and execute it, this wasn't the case.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter playing around by writing my own code to the flash, i realized that it's is being read into memory and executed long before the system is halted. In fact it seems like the code at 0xFFFF0000 is just some kind of debug console which is only jumped to if a halt command is issued, or the reading \/ executing the code from flash fails. By the time the JTAG is able to connect and issue a command, the entire kernel has already been loaded and initialized, which explains why I couldn't set any breakpoints on the bootloader.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI can write a breakpoint to the flash so that an exception is generated and the system fails to load, then remove the breakpoint and manually jump back to the bootloader, but for whatever reason the system doesn't boot properly the second time. This isn't a huge issue because I can still debug the bootloader up until the a certain point (as long as any code I write is run during early boot, I can debug that too), but until I can find why it fails the second time, there is a window of time between the late boot stage and early kernel initialization where I can't debug.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ESuccess\u003C\/h2\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-6S4YPz4Jllc\/VVHowXsgdYI\/AAAAAAAABGI\/PImx2nl6NZo\/s1600\/CodeInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"242\" src=\"http:\/\/1.bp.blogspot.com\/-6S4YPz4Jllc\/VVHowXsgdYI\/AAAAAAAABGI\/PImx2nl6NZo\/s640\/CodeInjection.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EMy main goal was to inject code into the firmware both by running an executable on the target computer and with physical access to the hard drive, which I've achieved. Now I'll just poke around and see what I can do with it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIf you're wondering how easy it would be for an attacker to infect a hard drive's firmware, here are two quick ways they could to do it.\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003ESending firmware update commands over the SATA interface from the host computer (requires root\/admin).\u003C\/li\u003E\u003Cli\u003ECreate a portable SPI programmer that can flash the firmware by being pressed against the test points on the bottom of the hard drive (would only take about 5 seconds).\u0026nbsp;\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003ESomething...something...aliens...something...something...government... *puts on tinfoil hat*\u003Cbr \/\u003E\u003Cbr \/\u003EPart 6 (Final part):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html\u003C\/a\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/828040756229904941\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/828040756229904941"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/828040756229904941"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html","title":"Hard Disk Firmware Hacking (Part 5)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-CwG7cjSp_xs\/VVHX3ppQ8II\/AAAAAAAABF4\/D6-HkjFg2mw\/s72-c\/flashrom.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-840112304280512660"},"published":{"$t":"2015-05-05T14:18:00.000-07:00"},"updated":{"$t":"2015-05-18T07:58:01.057-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 4)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EIt seems that the bootstrap code is just scattered around various memory addresses and there's no simple way to dump all of it, so i decided to just dump a chunk of memory from 0x00000000 and look for any reference to addresses outside of that chunk (allowing me to build up a basic map of the code).\u003Cbr \/\u003E\u003Cbr \/\u003EAlthough the exact addresses vary between disk models, my layout should give you a good idea where to look.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E0x00000000 - 0x0000A520\u003C\/li\u003E\u003Cli\u003E0x0000EA24 - 0x00014F74\u003C\/li\u003E\u003Cli\u003E0xFFE19E00 - 0xFFE34D9A\u003C\/li\u003E\u003Cli\u003E0xFFFF2800 - 0xFFFF2800\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EAfter poking around, i found it was reading some code into memory from somewhere, which I assumed to be the flash.\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-duSheH_MD-U\/VUkdUZpR2wI\/AAAAAAAABEs\/nLKJcQUG0q4\/s1600\/Flash_Snippet.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"480\" src=\"http:\/\/3.bp.blogspot.com\/-duSheH_MD-U\/VUkdUZpR2wI\/AAAAAAAABEs\/nLKJcQUG0q4\/s1600\/Flash_Snippet.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EFirst few bytes of the flash\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EThe flash starts with a table which spans from 0 to 0x120 (the start of the first block), each table entry is 32 bytes and follows the same format (see: image). Each block has an id from 1 to n, with the exception of the first block which is always 0x5A.\u003Cbr \/\u003E\u003Cbr \/\u003EThe block at 0x5A is some kind of bootloader which likely reads and decompresses the rest of the blocks from flash, but I'm not sure yet as it's proving a problem to reverse. I wanted to intercept this bootloader at the entry point, which sounds easy, it's not.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EAt some point during the bootstrap process my hardware breakpoints stop working, it could be that the processor is overwriting the register, remapping memory, or disabling them all together; but I've not found the issue yet. This means I can't simply set a breakpoint on the bootloader entry point (0x19000).\u003C\/li\u003E\u003Cli\u003EThe bootstrap code responsible for loading and executing the bootloader is in ROM, so I can't set software breakpoints either.\u003C\/li\u003E\u003Cli\u003EWatchpoints don't seem to work at all, even before my breakpoints stop working I can't get the code to break on any memory access.\u003C\/li\u003E\u003Cli\u003EMost of the code that isn't in ROM is using some kind of paging (aka overlaying), which reads certain regions of code into memory when they're needed, then replaces them when they're not, preventing the use of software breakpoints.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAll in all, this was proving to be must more of a pain than I expected so I decided the easiest option would be to buy a drive with an external EEPROM chip, instead of one built into the MCU. This way I could write software breakpoints directly to the flash chip with an EEPROM programmer.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-F2Xp2bH__Ls\/VUkjsE-joUI\/AAAAAAAABE4\/-Hb5E-6WtAU\/s1600\/PCB_Flash.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"424\" src=\"http:\/\/4.bp.blogspot.com\/-F2Xp2bH__Ls\/VUkjsE-joUI\/AAAAAAAABE4\/-Hb5E-6WtAU\/s1600\/PCB_Flash.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp;Hardware and firmware wise this disk is pretty much identical, except the firmware is now stored in a 256k SPI flash chip, instead of in the MCU's internal memory. The first thing I did was use a multimeter to see if there's anywhere on the top of the PCB i could connect to the flash chip (so I didn't have to desolder it or keep unscrewing the PCB from the disk).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-9Qx4gtQddrw\/VUkkxvnU1-I\/AAAAAAAABFE\/9JwlTaLgUYc\/s1600\/ISP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"624\" src=\"http:\/\/3.bp.blogspot.com\/-9Qx4gtQddrw\/VUkkxvnU1-I\/AAAAAAAABFE\/9JwlTaLgUYc\/s1600\/ISP.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EWP# and HOLD# are shorted to VCC, so they're not a problem and the rest of the required pins are brought out to the test pads around E11. I tried connecting my TUMPA's SPI interface to the test pads and using the flashrom software, but it was unable to detect the chip. I'm not sure if this is because my TUMPA isn't capable of in-circuit programming, or there is other stuff on the same data lines, but it I simply couldn't get it to work.\u003Cbr \/\u003E\u003Cbr \/\u003EMy new plan is to get a SOIC clip, a decent EEPROM programmer, and a desoldering station for if neither of the other option work; In the mean time I will be trying to find out what's stopping my breakpoints from working and see if i can remedy that. I'll probably not have another update until all my stuff gets delivered and I have a few days to try it all out.\u003Cbr \/\u003E\u003Cbr \/\u003EPart 5 (Writing the flash):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/840112304280512660\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/840112304280512660"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/840112304280512660"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html","title":"Hard Disk Firmware Hacking (Part 4)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-duSheH_MD-U\/VUkdUZpR2wI\/AAAAAAAABEs\/nLKJcQUG0q4\/s72-c\/Flash_Snippet.png","height":"72","width":"72"},"thr$total":{"$t":"4"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-1769415988767535306"},"published":{"$t":"2015-04-21T10:01:00.000-07:00"},"updated":{"$t":"2015-05-18T07:57:06.161-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 3)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EBefore we get started with part 3, I have a few updates regarding part 1 \u0026amp; 2.\u003Cbr \/\u003E\u003Cbr \/\u003EI've found that the reset pad on the JTAG header is not actually a system reset (SRST) but a TAP reset (TRST), which isn't very useful for debugging. Here is the updated layout with the system reset signal added (this will allow the 'reset halt' command to break on the reset vector, before any instructions are executed).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-qVcEybzOjTw\/VTZnIGTiHGI\/AAAAAAAABDk\/WuV-Osa__o8\/s1600\/JTAG_Pins_New.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"620\" src=\"http:\/\/2.bp.blogspot.com\/-qVcEybzOjTw\/VTZnIGTiHGI\/AAAAAAAABDk\/WuV-Osa__o8\/s1600\/JTAG_Pins_New.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EIn my case there wasn't a test pad for the SRST line, but there was a very small exposed bit of copper underneath the serial sticker, which was connected to the SRST pin of the CPU.\u003Cbr \/\u003E\u003Cbr \/\u003ECeriand on \u003Ca href=\"http:\/\/www.reddit.com\/r\/ReverseEngineering\/comments\/32jx6k\/dumping_the_firmware_of_a_hard_drive_with_jtag\/cqcbdda\"\u003EReddit\u003C\/a\u003E\u0026nbsp;pointed out that the JTAG header matches the footprint of a MICTOR connector (38 or 40 pin one usually), so if you don't want to do any soldering you could get yourself a MICTOR connector and cable.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-jrqTYAonEp4\/VTZpDQxXg4I\/AAAAAAAABDw\/MomiWLykIxE\/s1600\/MICTOR.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/3.bp.blogspot.com\/-jrqTYAonEp4\/VTZpDQxXg4I\/AAAAAAAABDw\/MomiWLykIxE\/s1600\/MICTOR.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EMICTOR 38 connector\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EI've also found out the hard way that older PSUs don't like to be used at extremely low voltage (components inside them tend to explode), so I recommend buying a decent AC to Molex power adapter (don't get the cheap ones, they die after a day).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-CdZRVUk7nmo\/VTZ9wGYlqyI\/AAAAAAAABEY\/Dc2MY-LgFK8\/s1600\/fuse.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"478\" src=\"http:\/\/3.bp.blogspot.com\/-CdZRVUk7nmo\/VTZ9wGYlqyI\/AAAAAAAABEY\/Dc2MY-LgFK8\/s1600\/fuse.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EApparently glass fuses like to explode and send shards flying everywhere\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003ELastly: because the JTAG header has an RTCK connector, you should be able to set adapter_khz in the openocd config to 0. The JTAG can then use adaptive clocking, which should prevent any timeout errors.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EBootstrap \u0026amp; Bootloader\u003C\/h2\u003E\u003Cdiv\u003EAfter some reversing I'm now convinced that the bootstrap code in Part 2 is not used during a normal boot. On execution it waits for some data on a port (most likely the serial port), then acts accordingly. If no data is found, the code goes into an infinite loop and the drive never boots.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-xuj5GZP_afA\/VTZwaEtvuPI\/AAAAAAAABD8\/sKqjDxDcOus\/s1600\/Bootstrap1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/4.bp.blogspot.com\/-xuj5GZP_afA\/VTZwaEtvuPI\/AAAAAAAABD8\/sKqjDxDcOus\/s1600\/Bootstrap1.png\" width=\"504\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOn this CPU the 0x1C00A000 - 0x1C00AFFF range appears to be mapped to various ports and test pads all around the PCB. Now, because I don't have the money for an oscilloscope or decent logic analyzer I'm going to have to pass up on mapping these ports, even though it would make things easier.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAll this code does is read some kind of switch which enters the system into a specific mode based on the value:\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E4 - Not sure, but it waits infinitely for a value on some port. My assumption is this code probably allows developers to read\/write\/erase the processor's internal flash.\u003C\/li\u003E\u003Cli\u003E3 - Jumps to the address in R4 (in my case this is 0, but that could be by design)\u003C\/li\u003E\u003Cli\u003E6 - A serial console which looks for ASCII bytes (r, w, j, h) on the serial port, allowing the developer to send read, write, jump, and halt commands.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003EI'm not familiar with how ports are mapped to memory, but\u0026nbsp;0x1C00A030 is always 0 while\u0026nbsp;0x1C00A03A is always 0xFFFF (which I assume means one is constant at a low voltage and the other constant at a high voltage).\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EInterestingly if we set a hardware breakpoints on \"cmp R1, #3\" and set R1 to 3, the code will jump to address 0 and boot normally (this is why I think 0 doesn't mean uninitialized). Let's see what's at address 0.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-zrF58vjNGAI\/VTZ53J46_gI\/AAAAAAAABEM\/7db5ldTf708\/s1600\/IVT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/4.bp.blogspot.com\/-zrF58vjNGAI\/VTZ53J46_gI\/AAAAAAAABEM\/7db5ldTf708\/s1600\/IVT.png\" width=\"614\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAddress 0 is usually RAM, but there's already valid code here, so it's quite likely the CPU temporarily maps address 0 to some area of the internal ROM during boot. This is a standard ARM IVT, which you'd see at the boot address of any ARM devices; making me think the bootstrap at 0xFFFF0000 is only executed if the CPU detects a JTAG is attached. Until I can buy a decent logic analyzer and figure which port allows us to control the bootstrap mode switch, the only apparent way to boot the disk normally with a JTAG attached is to perform a \"reset halt\" then manually set R1 to '3' just before the check.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn this case the boot code is all over the place with massive gaps between sections, my next step will be to map, dump, and reverse it. I'd probably have done that already, but my power adapter didn't arrive until yesterday.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EPart 4 (Working with spi flash):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/1769415988767535306\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/1769415988767535306"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/1769415988767535306"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html","title":"Hard Disk Firmware Hacking (Part 3)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-qVcEybzOjTw\/VTZnIGTiHGI\/AAAAAAAABDk\/WuV-Osa__o8\/s72-c\/JTAG_Pins_New.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-6032170972835570724"},"published":{"$t":"2015-04-13T07:27:00.001-07:00"},"updated":{"$t":"2015-05-18T07:53:15.040-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 2)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003ENow that everything is ready to be connected, power up the hard drive an run openocd with the following command: openocd -f interface\/\u0026lt;your interface here\u0026gt;.cfg -f target\/test.cfg\u003Cbr \/\u003E\u003Cbr \/\u003Etest.cfg should be the configuration for the CPU used by your hard disk controller, for most marvell CPUs \u003Ca href=\"http:\/\/pastebin.com\/Rb94dGcq\"\u003Ethis config\u003C\/a\u003E should work. I'm not sure of the adapter_khz, so I've set mine to 100 (as long as this value is lower than the actual it should work).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-LaPlnReD1qU\/VSu2opfNfpI\/AAAAAAAABCY\/lmKMO2QpuRo\/s1600\/OpenOCD.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"362\" src=\"http:\/\/1.bp.blogspot.com\/-LaPlnReD1qU\/VSu2opfNfpI\/AAAAAAAABCY\/lmKMO2QpuRo\/s1600\/OpenOCD.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EIf all went well, you should see something along the lines of the above. Now you can use telnet to connect to port 4444 and issue commands.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/--SmjKvyASlQ\/VSu4usvuy1I\/AAAAAAAABCo\/OoomVlQIST8\/s1600\/Telnet.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"364\" src=\"http:\/\/2.bp.blogspot.com\/--SmjKvyASlQ\/VSu4usvuy1I\/AAAAAAAABCo\/OoomVlQIST8\/s1600\/Telnet.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThe Marvell chips used in hard disk controller aren't publicly documented; so if you want to know information such as their memory map, you'll have to sign a NDA and probably pay some money. Instead, what I'm going to do is try to figure out as much as I can from the firmware and possibly by probing the circuit.\u003Cbr \/\u003E\u003Cbr \/\u003EGetting the firmware isn't easy when you can't de-solder and dump the flash, so we'll have to work through the boot process. Most ARM CPUs begin executing at address 0xFFFF0000, this is known as the reset vector. If we dump 65536 bytes from this address, we'll find the bootstrap code which will be a good starting point.\u003Cbr \/\u003E\u003Cbr \/\u003EIn order o dump memory, we first need to halt the CPU, which can be done with the command \"reset halt\" (It's required that we first reset the system as we can't halt past a certain stage). If the reset command doesn't work for any reason e.g: RST pin of JTAG isn't connected to anything, you'll need to disconnect and reconnect the hard drive's power source then quickly tap into the JTAG and issue the halt command within a few second. Memory dumped with the command \"dump_image \u0026lt;file name\u0026gt; \u0026lt;address\u0026gt; \u0026lt;size\u0026gt;\".\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-U2NB2b6iLm4\/VSvaAyw4lJI\/AAAAAAAABDQ\/FlffCoLjxyg\/s1600\/Bootstrap.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/1.bp.blogspot.com\/-U2NB2b6iLm4\/VSvaAyw4lJI\/AAAAAAAABDQ\/FlffCoLjxyg\/s1600\/Bootstrap.png\" width=\"576\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EWhen we disassemble the dumped image, it's some fairly small (4 kb) ARM bootstrap code, which should lead us to the rest of the firmware. I've not had much time to look, so I'll reverse the bootstrap code and post the next part when I've found the rest of the bootloader and kernel.\u003Cbr \/\u003E\u003Cbr \/\u003EPart 3 (Bootstrap analysis):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/6032170972835570724\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6032170972835570724"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6032170972835570724"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html","title":"Hard Disk Firmware Hacking (Part 2)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-LaPlnReD1qU\/VSu2opfNfpI\/AAAAAAAABCY\/lmKMO2QpuRo\/s72-c\/OpenOCD.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-5165513911128886853"},"published":{"$t":"2015-04-13T07:27:00.000-07:00"},"updated":{"$t":"2015-05-18T07:51:16.955-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 1)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EI've not been doing much in the windows malware world for a while now, because quite frankly I've run out of ideas and I'm totally bored. Recently I decided to take the jump into electronics \/ hardware hacking and people have suggested I post some of that here.\u003Cbr \/\u003E\u003Cbr \/\u003EA couple of years ago I started looking into BIOS rootkits (back before (U)EFI was mainstream). I was aware that most hardware had a BIOS type setup that is usually initialized during the POST phase of the boot process, so I was looking into the possibility of modifying \u0026nbsp;firmware to work in the same way as a BIOS rootkit would. My two main candidates were the GPU and Hard Disk, which I began looking into (but was mostly sandbagged by my lack of reverse engineering knowledge at the time).\u003Cbr \/\u003E\u003Cbr \/\u003EMy current project is on hold while I await the arrival of some expensive hardware which will allow me to overcome a setback (the manufacture disabled the JTAG interface prior to shipping), so I decided to have a play with something I saw on spritesmods in 2013 (\u003Ca href=\"https:\/\/spritesmods.com\/?art=hddhack\"\u003EHard disk hacking\u003C\/a\u003E).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EHard Disk Hacking\u003C\/h2\u003E\u003Cdiv\u003EI found an old Western Digital hard drive in pretty good condition, so I unscrewed the controller and had a look.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-dzR0lJk-giQ\/VSudN6bYhAI\/AAAAAAAABBE\/e1pn9MdYCa4\/s1600\/HDD_Controller.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"428\" src=\"http:\/\/2.bp.blogspot.com\/-dzR0lJk-giQ\/VSudN6bYhAI\/AAAAAAAABBE\/e1pn9MdYCa4\/s1600\/HDD_Controller.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EThis is where I'd put my flash...if i had any.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe guy on spritesmods had dumped the firmware by de-soldering the flash chip and dumping it manually, the only problem is the red circle is were the flash chip should be (thanks obama).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003EAbove the red circle is a Marvell 88i8846-TFJ2 ARM processor which has internal flash. I don't fancy my chances of de-soldering the entire CPU and trying to access the memory manually, so I decided to go for the JTAG method.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-MGVDOTF1i3w\/VSuf-U_X53I\/AAAAAAAABBQ\/mWXDn20d6Bc\/s1600\/JTAG_Pins.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"621\" src=\"http:\/\/1.bp.blogspot.com\/-MGVDOTF1i3w\/VSuf-U_X53I\/AAAAAAAABBQ\/mWXDn20d6Bc\/s1600\/JTAG_Pins.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EThe header for the JTAG is fairly well known, though it can be upside down (in my case the first pin of the header is denoted by a '1' on the board). Pins 6 to 11 are all we need for the JTAG and the metal circle, which is the ground.\u003Cbr \/\u003E\u003Cbr \/\u003EAs you can probably see, I've decided not to solder the pins. This is for two reasons: They're rusty and they're too close together, so I could easily short the board. Instead I opted to use the test pads, which can be found using the 'continuity' mode on the multimeter (thanks to @\u003Ca href=\"https:\/\/twitter.com\/McGrewSecurity\"\u003EMcGrewSecurity\u003C\/a\u003E for the tip).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-kV58jqhN-ag\/VSujUwOxFSI\/AAAAAAAABBc\/RWckRLsyb9c\/s1600\/Multimeter_Continuity.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"480\" src=\"http:\/\/1.bp.blogspot.com\/-kV58jqhN-ag\/VSujUwOxFSI\/AAAAAAAABBc\/RWckRLsyb9c\/s1600\/Multimeter_Continuity.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EBy setting this mode on the multimeter it will show us the resistance between two points, the '1' means total resistance (the points likely aren't even connected) and '0.01' is a good connection. The meter will also emit and audible (and incredibly annoying) high pitch tone when the resistance is low, so we only really need to use the tone to tell if two points are connected.\u003Cbr \/\u003E\u003Cbr \/\u003EWith the hard drive disconnected simply put one of the multimeter probes on the header pin you want to locate the test pad for, then move the other probe around the test pads in the area where mine are until you hear a beep. On my board you'll see there are visible data lines running from the header pins to the test pads, which gives you a good idea where to look (depending on the quality of your eyesight).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv\u003EI didn't want the hard drive plugged into my computers power supply in case something went wrong, and my computer is the opposite side of the room, so I didn't want to try and build a 10m long SATA cable either. Here's my solution (disclaimer: If you injure yourself blame someone else i.e. not me).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-gWIv43MlWL8\/VSumonMYl3I\/AAAAAAAABBo\/nJJDCrVC2cI\/s1600\/PSU_Shorted.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"466\" src=\"http:\/\/2.bp.blogspot.com\/-gWIv43MlWL8\/VSumonMYl3I\/AAAAAAAABBo\/nJJDCrVC2cI\/s1600\/PSU_Shorted.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003EIf you have a spare PSU lying around, you can short the third and forth pin of the ATX header to turn it on without connecting it to a motherboard. My PSU was very old and missing a fan, so I was pleasantly surprised when nothing shorted or caught fire (My entire house is on the same circuit breaker, so I'd be spend the next hour rebooting various devices).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-uL2S05hTifU\/VSuopuew0XI\/AAAAAAAABB0\/Vo62WgYiQoE\/s1600\/IDE_SATA.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"200\" src=\"http:\/\/3.bp.blogspot.com\/-uL2S05hTifU\/VSuopuew0XI\/AAAAAAAABB0\/Vo62WgYiQoE\/s1600\/IDE_SATA.png\" width=\"200\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-22bkCWoNHNk\/VSupjTm7vpI\/AAAAAAAABB8\/IwaoIjF-OjY\/s1600\/TUMPA.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"\u003E\u003Cimg border=\"0\" height=\"153\" src=\"http:\/\/4.bp.blogspot.com\/-22bkCWoNHNk\/VSupjTm7vpI\/AAAAAAAABB8\/IwaoIjF-OjY\/s1600\/TUMPA.png\" width=\"200\" \/\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EI use a $5 SATA to USB connector, which is perfect for the data side of the hard disk connection. The red board on the right is a $30 TIAO USB Multi-Protocol Adapter, which is FT2232H based and also does SPI as well as JTAG.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-lS6ScJ9a6Aw\/VSuqeQk-g1I\/AAAAAAAABCI\/x5aH3yF0w5Q\/s1600\/Full_Setup.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"460\" src=\"http:\/\/4.bp.blogspot.com\/-lS6ScJ9a6Aw\/VSuqeQk-g1I\/AAAAAAAABCI\/x5aH3yF0w5Q\/s1600\/Full_Setup.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EI really need a bigger desk\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EHere we have a stupidly over-complicated setup due to the fact my Windows desktop reside on the other side of the room: The iMac is running a Linux virtual machine for the JTAG software (FTDI driver and OpenOCD) because they're a pain to install on Windows or OSX . The Windows system (left monitor) is running IDA for reversing\/debugging (I plan on trying to connect IDA to the OpenOCD GDB service over my local network when I start doing live analysis).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EPart 2 (Dumping the bootstrap):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/5165513911128886853\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-1.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5165513911128886853"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5165513911128886853"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-1.html","title":"Hard Disk Firmware Hacking (Part 1)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-dzR0lJk-giQ\/VSudN6bYhAI\/AAAAAAAABBE\/e1pn9MdYCa4\/s72-c\/HDD_Controller.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-7347995687245900217"},"published":{"$t":"2014-12-15T07:24:00.000-08:00"},"updated":{"$t":"2014-12-21T09:42:43.695-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ransomware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"OphionLocker Analysis: Proof Anyone Really Can Write Malware"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003EOphionLocker is supposedly the new ransomware on the block and is already being compared with sophisticated operations such as CryptoLocker and CryptoWall, so i decided to take a look and what I found is nothing short of hilarious.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-BnTfH-EX5pA\/VI7t3S9XzSI\/AAAAAAAAAx4\/wCmbmZoeRV4\/s1600\/ConsoleWindow.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-BnTfH-EX5pA\/VI7t3S9XzSI\/AAAAAAAAAx4\/wCmbmZoeRV4\/s1600\/ConsoleWindow.png\" height=\"382\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThat's right, the ransomware is actually a console application, Instead of writing the Win32 application. The developer has opted to use a console application, which implies he is either writing command line tools (he's not), or that he has absolutely no damn idea what he's doing.\u003Cbr \/\u003E\u003Cbr \/\u003EIf there is even any shadow of doubt that this was written by a competent C++ developer, this should set the record straight:\u003Cbr \/\u003E\u003Cbr \/\u003EH:\\\\ConsoleApplication1\\\\Release\\\\ConsoleApplication1.pdb\u003Cbr \/\u003E\u003Cbr \/\u003EThat's the PDB path of this application: \"ConsoleApplicationX\" is the name chosen by Visual Studio when automatically creating a new C++ console project, ConsoleApplication1 implies that this is the first Visual Studio project created; either the developer has just moved from another development environment, or more likely he's never coded C++ before.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-tFsEiWf5_Oc\/VI7wa4Tg19I\/AAAAAAAAAyE\/tm7eAimGzTc\/s1600\/HideWindow.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-tFsEiWf5_Oc\/VI7wa4Tg19I\/AAAAAAAAAyE\/tm7eAimGzTc\/s1600\/HideWindow.png\" height=\"320\" width=\"231\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThis is a hack to make the console window invisible, as a result the console window will open and then disappear a second later when running the application.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-uO2Ongk1quE\/VI7xOHh0QFI\/AAAAAAAAAyM\/xBsatM1U5yM\/s1600\/Symbols.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-uO2Ongk1quE\/VI7xOHh0QFI\/AAAAAAAAAyM\/xBsatM1U5yM\/s1600\/Symbols.png\" height=\"438\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EIf you're new to programming, writing your own cryptographic library is obviously quite a challenge, as you can see he's opted to just use the Crypto++.\u003Cbr \/\u003E\u003Cbr \/\u003E\"But MalwareTech, even using a public cryptographic library, he'd need to know how to implement it.\"\u003Cbr \/\u003E\u003Cbr \/\u003EWell if we look through the strings in the application, we find the following string: \"ecies.private.key\", which is the name of the file that the application uses to store the private key; this is consistent with the example ECIES (Elliptic Curve Integrated Encryption Scheme) code on the Crypto++ wiki.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/---z0i3c1P1g\/VI70gdz0MqI\/AAAAAAAAAyY\/RKysW4GG74Y\/s1600\/ECIESExample.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/---z0i3c1P1g\/VI70gdz0MqI\/AAAAAAAAAyY\/RKysW4GG74Y\/s1600\/ECIESExample.png\" height=\"260\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThe C\u0026amp;C communicated mechanism is much of the same story, although it could have been implemented with a few lines of code using the WinInet library, the developer has opted to use the insanely bulky HTTP Client library \u003Ca href=\"http:\/\/www.codeproject.com\/Articles\/66625\/A-Fully-Featured-Windows-HTTP-Wrapper-in-C\"\u003EWinHTTPClient\u003C\/a\u003E, which uses the WinHTTP api (should only be used for service and not client applications).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-0hvb5GHpYuM\/VI72hUb-xsI\/AAAAAAAAAyk\/ve3Ll2lk6wE\/s1600\/Copy%26Pasta.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-0hvb5GHpYuM\/VI72hUb-xsI\/AAAAAAAAAyk\/ve3Ll2lk6wE\/s1600\/Copy%26Pasta.png\" height=\"258\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EObviously, no application is complete without some error handling, so here's what happens if the locker fails to connect to the C\u0026amp;C.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-BQYLK6vEkX8\/VI73i9ZEfII\/AAAAAAAAAyw\/zOshbQEs7T0\/s1600\/AppCrash.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-BQYLK6vEkX8\/VI73i9ZEfII\/AAAAAAAAAyw\/zOshbQEs7T0\/s1600\/AppCrash.png\" height=\"498\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EError handling is love, error handling is life.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EGUI programming tends to be quite tricky, but it's nothing you cant achieve with a message box and 300 text files that all say the same thing.\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-ONTbigyTbZc\/VI7808bTd7I\/AAAAAAAAAzE\/XYKiApcFwhE\/s1600\/Message.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-ONTbigyTbZc\/VI7808bTd7I\/AAAAAAAAAzE\/XYKiApcFwhE\/s1600\/Message.png\" height=\"448\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cspan style=\"font-size: small; text-align: left;\"\u003EThis is why we can't have nice things.\u003C\/span\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EConclusion\u003C\/h2\u003EQ: Can you code functional ransomware with absolutely no programming experience whatsoever?\u003Cbr \/\u003EA: Yes.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-_fcdz-ff3g0\/VI74PhRf6rI\/AAAAAAAAAy4\/h-73T0KJXtQ\/s1600\/SoDone.gif\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-_fcdz-ff3g0\/VI74PhRf6rI\/AAAAAAAAAy4\/h-73T0KJXtQ\/s1600\/SoDone.gif\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/md5%20e17da8702b71dfb0ee94dbc9e22eed8d%20sha1%20eb78b7079fabecbec01a23c006227246e78126ab%20sha256%20c1a0173d2300cae92c06b1a8cb344cabe99cf4db56fa9dca93629101c59ce68f\/\"\u003EOphionLocker\u003C\/a\u003E\u003Cbr \/\u003EMD5: e17da8702b71dfb0ee94dbc9e22eed8d\u003Cbr \/\u003ESHA1: eb78b7079fabecbec01a23c006227246e78126ab\u003Cbr \/\u003ESHA256: c1a0173d2300cae92c06b1a8cb344cabe99cf4db56fa9dca93629101c59ce68f\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/7347995687245900217\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/ophionlocker-proof-anyone-really-can.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7347995687245900217"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7347995687245900217"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/ophionlocker-proof-anyone-really-can.html","title":"OphionLocker Analysis: Proof Anyone Really Can Write Malware"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-BnTfH-EX5pA\/VI7t3S9XzSI\/AAAAAAAAAx4\/wCmbmZoeRV4\/s72-c\/ConsoleWindow.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-333906824091956844"},"published":{"$t":"2014-12-14T07:58:00.000-08:00"},"updated":{"$t":"2014-12-14T08:32:29.132-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"news"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Phase Bot - A Fileless Rootkit (Part 2)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EAs I said in the last part of the analysis the sample I had was just a test binary, but now I have some real ones thanks to some help from \u003Ca href=\"https:\/\/twitter.com\/Xylit0l\"\u003E@Xylit0l\u003C\/a\u003E. The new binaries incorporate some much more interesting features which I'll go over in this article.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EReverse Connection\u003C\/h2\u003E\u003Cdiv\u003EAlthough Phase is not a banking Trojan as it only supports standard form grabbing, it does have some banking Trojan features such as Reverse RDP \u0026nbsp;and Reverse SOCKS. The idea behind this is that the RDP or SOCKS daemon on the infected machine connects to the client (the bot master or command and control server), as opposed to the other way round, allowing infected machines behind NAT\/Firewalls to still be used as servers.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EInterestingly, the RDP interface is built into the C\u0026amp;C panel and only allows basic mouse \/ keyboard input; As you'd expect this is very slow and incredibly demanding on the HTTP server.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-EFDS7agbr-8\/VI2dTNxEHfI\/AAAAAAAAAxM\/pzSBTexn39Y\/s1600\/ReverseRDP.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-EFDS7agbr-8\/VI2dTNxEHfI\/AAAAAAAAAxM\/pzSBTexn39Y\/s1600\/ReverseRDP.png\" height=\"520\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EEmbedded Reverse RDP\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EModule Loader\u003C\/h2\u003E\u003Cdiv\u003EThe module loader allows the bot functionality to be extended via paid or 3rd party modules. These modules are uploaded to the panel ready to be installed by the bot, which supports storing modules on disk or in a registry key (registry stored modules are manually loaded into memory and executed by the bot, thus bypassing anti-virus scanners).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-_4nqmrjKwIA\/VI2gI7taIjI\/AAAAAAAAAxY\/dghiQssnlL8\/s1600\/ModuleInstall.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-_4nqmrjKwIA\/VI2gI7taIjI\/AAAAAAAAAxY\/dghiQssnlL8\/s1600\/ModuleInstall.png\" height=\"400\" width=\"265\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EOptions specifying how the bot should handle the module.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EModules\u003C\/h2\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe modules themselves are 32-bit or 64-bit DLLs (depending on the system architecture), they're downloaded from the panel and stored in an RC4 encrypted format either on the disk or in the registry. Even with RC4 encryption, they are very easy to identify and dump due to a static encryption key and format.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-lWMqKwuEQ1I\/VI2lJ91uGyI\/AAAAAAAAAxo\/ybuIf_uhFFo\/s1600\/EncryptedModule.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-lWMqKwuEQ1I\/VI2lJ91uGyI\/AAAAAAAAAxo\/ybuIf_uhFFo\/s1600\/EncryptedModule.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn the wild we've only found 3 modules (all of which are made by the same developer as Phase).\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Evnc32 - reverse VNC daemon (32-bit).\u003C\/li\u003E\u003Cli\u003Evnc64 - reverse VNC daemon (64-bit).\u003C\/li\u003E\u003Cli\u003Escan32 - Point of Sales Track1\/Track2 stealer (32-bit).\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAs of writing this both the encrypted and decrypted versions of each module have absolutely no detections on virustotal:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/88493515adffd2528a86698e2f7084dbb79f317b6720762b8b4221e90fe2d8b5\/analysis\/\"\u003Escan32 (Encrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/9bd4d77985b1377ea35611ba3c4b42ad93562eb0f66d88d6cf007a4db1d3cd73\/analysis\/1418570488\/\"\u003Evnc32 (Encrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/1a509646a64451f8683a792c0e92bc96ac544106c5dbe54befe7fb6648bbe141\/analysis\/1418570571\/\"\u003Evnc64 (Encrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/e1988a1876263837ca18b58d69028c3678dc3df51baf1721535df3204481e6a1\/analysis\/1418570463\/\"\u003Escan32 (Decrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/c33f2fdd945d053991e178fa12ab9ffea18f751313a8888c74004cbd680bbd75\/analysis\/1418570576\/\"\u003Evnc32 (Decrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/f88d5320b3882108f50d3c234313fe604956c0fc057c75b85cdfc3b8e6e9bfd1\/analysis\/1418570599\/\"\u003Evnc64 (Decrypted)\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ESamples \u0026amp; Resources\u003C\/h2\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/github.com\/MalwareTech\/PhaseDump\"\u003EPhaseDump (Tool for decrypting Phase modules)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!jBQmEIrb!sh2s6ItAgbeo2X23To4syvIZ0n5VdNyiCcWMQjUWxOw\"\u003EWin32\/Phase\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: 5767b9bf9cb6f2b5259f29dd8b873e36\u003C\/div\u003E\u003Cdiv\u003ESHA1: 6cb74b4e309d80efbe674d3d48376ee1f7e2edda\u003C\/div\u003E\u003Cdiv\u003ESHA256: 3a9f8f9dc215be8bc8d278ab99f5e6bdac2d1732d4a3b536d55696dfe766491a\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!XV4wBA4C!IlWa-lLP8EcaxwVbnKdybxMivR5TKj5YE6a-B82VK_8\"\u003Escan32 (Decrypted)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: 1fa781b2ece5dfa36d51704c81e61e19\u003C\/div\u003E\u003Cdiv\u003ESHA1: d379bf330153c1bf742f59013ea6636e02ff28b4\u003C\/div\u003E\u003Cdiv\u003ESHA256: e1988a1876263837ca18b58d69028c3678dc3df51baf1721535df3204481e6a1\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!SMAXCBqA!hOMEupiWE_gSoyAWTVRq9mxtBWPCJW12lFHMjl0dOys\"\u003Evnc32 (Decrypted)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: 94eefdce643a084f95dd4c91289c3cf0\u003C\/div\u003E\u003Cdiv\u003ESHA1: 0bbd15c31782a23b1252544221c564866975ea7e\u003C\/div\u003E\u003Cdiv\u003ESHA256: c33f2fdd945d053991e178fa12ab9ffea18f751313a8888c74004cbd680bbd75\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!iAhHgbSR!OgwoNW1jVwDPHbrF7TfhS7EUhINQU5ASukiK7FoG9tg\"\u003Evnc64 (Decrypted)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: d7da422a3d23de95a9c3c969a31430e9\u003C\/div\u003E\u003Cdiv\u003ESHA1: 32bcf2adafc5b189c04619c7c484d77a21861aba\u003C\/div\u003E\u003Cdiv\u003ESHA256: f88d5320b3882108f50d3c234313fe604956c0fc057c75b85cdfc3b8e6e9bfd1\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/333906824091956844\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-fileless-rootkit-part-2.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/333906824091956844"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/333906824091956844"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-fileless-rootkit-part-2.html","title":"Phase Bot - A Fileless Rootkit (Part 2)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-EFDS7agbr-8\/VI2dTNxEHfI\/AAAAAAAAAxM\/pzSBTexn39Y\/s72-c\/ReverseRDP.png","height":"72","width":"72"},"thr$total":{"$t":"3"}}]}});