// API callback
authorshow({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549"},"updated":{"$t":"2015-06-19T06:30:59.308-07:00"},"category":[{"term":"malware"},{"term":"security"},{"term":"programming"},{"term":"news"},{"term":"reversing"},{"term":"windows internals"},{"term":"bootkits"},{"term":"hacking"},{"term":"tutorials"},{"term":"botnets"},{"term":"electronics"},{"term":"exploits"},{"term":"forensics"},{"term":"rovnix"},{"term":"ms14-066"},{"term":"tor"},{"term":"DDoS"},{"term":"bitcoin"},{"term":"darkode"},{"term":"irc"},{"term":"ransomware"},{"term":"sandboxing"},{"term":"uac elevation"}],"title":{"type":"text","$t":"MalwareTech"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default?alt=json-in-script"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default?alt=json-in-script\u0026start-index=26\u0026max-results=25"}],"author":[{"name":{"$t":"Malware Tech"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"62"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"25"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-2138822939362951786"},"published":{"$t":"2015-06-01T08:51:00.000-07:00"},"updated":{"$t":"2015-06-03T05:57:22.600-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"bootkits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"}],"title":{"type":"text","$t":"MalwareTech SBK - A Bootkit Capable of Surviving Reformat"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003ESince i got into firmware hacking, I've been working on a little project behind the scenes: A hard disk firmware based rootkit which allows malware to survive an operating system re-install or full disk format. Unfortunately I can't post a proof of concept for many reasons (people have even contacted me just to tell me not to post it), so instead I've written a presentation overviewing and explaining the rootkit, which I've dubbed MT-SBK.\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe general purpose of MT-SBK is to provide a \"framework\" for my previous project, \u003Ca href=\"http:\/\/www.malwaretech.com\/2014\/04\/coding-malware-for-fun-and-not-for.html\"\u003ETinyXPB\u003C\/a\u003E, A windows XP bootkit. This framework enables TinyXPB to be stored and loaded from within the hard disk firmware, preventing it from being removed by: antiviruses, operating system re-installs, or even full disk reformats. This rootkit is designed for a major brand of hard disk and can infect the firmware from within the operating system (no physical access required), it's also completely undetectable to software running on the host computer.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe only way to remove MT-SBK is by replacing that hard disk's PCB or connecting an SPI programmer directly to the flash chip and flashing it with the original firmware.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"http:\/\/malwaretech.net\/MTSBK.pdf\"\u003EMalwareTech SBK Overview - PDF\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/www.youtube.com\/watch?v=0gc-VF6bi3g\"\u003ESector Spoofing Example - Youtube\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-wPGeEnFDIdY\/VWyAMCHj5rI\/AAAAAAAABII\/_GOJSC5cqe0\/s1600\/ss%252B%25282015-04-29%252Bat%252B05.15.59%2529.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"282\" src=\"http:\/\/3.bp.blogspot.com\/-wPGeEnFDIdY\/VWyAMCHj5rI\/AAAAAAAABII\/_GOJSC5cqe0\/s320\/ss%252B%25282015-04-29%252Bat%252B05.15.59%2529.png\" style=\"display: none;\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/2138822939362951786\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/06\/hard-disk-firmware-rootkit-surviving.html#comment-form","title":"2 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/2138822939362951786"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/2138822939362951786"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/06\/hard-disk-firmware-rootkit-surviving.html","title":"MalwareTech SBK - A Bootkit Capable of Surviving Reformat"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-wPGeEnFDIdY\/VWyAMCHj5rI\/AAAAAAAABII\/_GOJSC5cqe0\/s72-c\/ss%252B%25282015-04-29%252Bat%252B05.15.59%2529.png","height":"72","width":"72"},"thr$total":{"$t":"2"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-3295817836015559749"},"published":{"$t":"2015-05-18T08:37:00.000-07:00"},"updated":{"$t":"2015-05-18T08:42:48.992-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Final)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: left;\"\u003ECore 2, I choose you.\u003C\/h2\u003E\u003Cdiv\u003ELess than 5 minutes after posting the last article, i discovered the final piece of my puzzle: a second CPU core. I was looking through my OpenOCD configuration when I realized it had a single tap definition hardcoded, so i decided to comment it out and let OpenOCD try to automatically discover the taps.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-KqXM-uyoijU\/VVYPnMPzkRI\/AAAAAAAABGc\/Lcok5MfTx-g\/s1600\/AutoTAP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"384\" src=\"http:\/\/1.bp.blogspot.com\/-KqXM-uyoijU\/VVYPnMPzkRI\/AAAAAAAABGc\/Lcok5MfTx-g\/s640\/AutoTAP.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAuto probing found two TAPs with the same id, which I assumed to be two different cores, so I updated my config accordingly.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003EHere's a new config designed to work with both cores:\u003C\/div\u003E\u003Cdiv\u003E\u003Cblockquote class=\"tr_bq\"\u003Etransport select jtag\u003Cbr \/\u003Eadapter_khz 100\u003Cbr \/\u003E\u003Cbr \/\u003Ejtag newtap auto0 tap -irlen 4 -expected-id 0x121003d3\u003Cbr \/\u003Ejtag newtap auto1 tap -irlen 4 -expected-id 0x121003d3\u003Cbr \/\u003E\u003Cbr \/\u003Etarget create auto0.tap feroceon -endian little -chain-position auto0.tap\u003Cbr \/\u003Etarget create auto1.tap feroceon -endian little -chain-position auto1.tap\u003Cbr \/\u003E\u003Cbr \/\u003Ereset_config srst_only\u003Cbr \/\u003Eadapter_nsrst_delay 200\u003Cbr \/\u003Ejtag_ntrst_delay 200\u003C\/blockquote\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter a few small adjustments, all that was left to do was run OpenOCD and see what secrets the new core holds.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-GDbooLOU5Mc\/VVn4vmDYzjI\/AAAAAAAABGw\/5O8ba-hOxSw\/s1600\/KernelBreakpoint.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"300\" src=\"http:\/\/1.bp.blogspot.com\/-GDbooLOU5Mc\/VVn4vmDYzjI\/AAAAAAAABGw\/5O8ba-hOxSw\/s640\/KernelBreakpoint.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOnce I'd connected to the JTAG via IDA, everything was clear. I could see that the second core was stopped on the breakpoint I'd written to the flash chip. This was the core responsible for loading and executing the bootloader, whilst the core I had been looking at before just waits in a loop. Obviously the bootstrap code must be different for core 2, because the other bootstrap just loops until a later time.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-gamTWQmYXEc\/VVn_gQ8oPMI\/AAAAAAAABHA\/HbXdTsp21aU\/s1600\/Bootstrap2.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/1.bp.blogspot.com\/-gamTWQmYXEc\/VVn_gQ8oPMI\/AAAAAAAABHA\/HbXdTsp21aU\/s640\/Bootstrap2.png\" width=\"518\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003EIt's clear that core 1's bootstrap is just debugging \/ management code, whilst core 2 has a completely separate region of code mapped to the same address. Core 2 not only loads the bootloader from the flash, but also appears responsible for most of the interesting operations such as handling SATA requests and writing the cache descriptor.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EConclusion\u003C\/h2\u003E\u003Cdiv\u003ESo there you have it, using very little experience I was able to JTAG a WD hard disk, dump the firmware, and even discover how to read \/ write the flash chip using ICP. I'm definitely going to spend some more time poking about in the firmware to see how parts of it work, but because that's outside the scope of these articles, and to avoid boring people, this will be the last article of the series. If I manage anything interesting, I will likely post my findings in a whitepaper and upload it alongside a demo video.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI'd like to continue posting both hardware and software articles (and some tutorial), so if you have any suggestions for either, send them to admin@malwaretech.com.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EHope you've enjoyed a slightly different style of writing and learned something new.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/3295817836015559749\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html#comment-form","title":"8 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3295817836015559749"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3295817836015559749"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html","title":"Hard Disk Firmware Hacking (Final)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-KqXM-uyoijU\/VVYPnMPzkRI\/AAAAAAAABGc\/Lcok5MfTx-g\/s72-c\/AutoTAP.png","height":"72","width":"72"},"thr$total":{"$t":"8"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-828040756229904941"},"published":{"$t":"2015-05-12T05:10:00.000-07:00"},"updated":{"$t":"2015-05-18T08:39:19.590-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 5)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\"Discovery requires experimentation\"\u003C\/h2\u003E\u003Cdiv\u003EThis weekend I made a pretty big breakthrough which lead to me making a few smaller breakthroughs and ultimately negating most of my previous research. I've also learned that \"not reinventing the wheel\" isn't always the best option, especially when it comes to trusting other people's research.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOne of the main goals was to find a way to quickly and easily reprogram the hard disk, given physical access. In the\u0026nbsp;\u003Ca href=\"https:\/\/spritesmods.com\/?art=hddhack\u0026amp;page=5\"\u003Espritesmods\u003C\/a\u003E\u0026nbsp;post he had remove the flash chip from the PCB and attached it to some veroboard, so he could swap it between the hard disk and the flash programmer. Obviously it's not very practical for me to have to keep disconnecting and reconnecting the flash chip, and especially impractical for an adversary looking to quickly infect a disk.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAs most already know, it is possible to flash WD hard disk firmware from within the OS as long as the account has Admin\/Root privileges. The disk must be running in order to accept SATA commands and must be restarted to load the new firmware. If the new firmware has errors the disk cannot start, therefore the firmware cannot be fixed (this is known as bricking). Due to the fact I'm hacking about with the firmware I'm likely to brick the device, so i needed another way of flashing it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EIn-Circuit Programming\u003C\/h2\u003E\u003Cdiv\u003EIn circuit Programming (ICP) is the ability to program a flash chip or other component, while it's still connected to the circuit. In the last article I was able to find the test ports that connected to the flash chip, but was unable to program it, however; after some experimentation over the weekend I finally managed to achieve ICP.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EThe Problem\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EOne of the biggest problems with ICP is that in order to write the flash chip you need to power it, but because it's connected to the rest of the circuit you end up powering other chips, which send data on various buses and interfere with your attempts to talk to the flash.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003ETo prevent interference on the SPI bus, it's usually enough to hold down the reset button or short the reset signal to ground, resulting in the system being held in reset and unable to start (giving you uninterrupted access to the flash's bus).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EHere's a list of what I'd tried.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EPowering the flash directly with 3.3v supply\u003C\/li\u003E\u003Cli\u003EPowering the flash directly with 3.3v supply while holding the system in reset\u003C\/li\u003E\u003Cli\u003EPowering the entire system by plugging in the HD\u003C\/li\u003E\u003Cli\u003EPowering the entire system by plugging in the HD while holding the system in reset\u003C\/li\u003E\u003C\/ul\u003E\u003C\/div\u003E\u003Cdiv\u003EI was ready to give up as nothing was clearly working (my SPI programmer couldn't so much as detect the flash chip), but on Saturday I decided to have one last go, and it worked straight away (sort of).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-CwG7cjSp_xs\/VVHX3ppQ8II\/AAAAAAAABF4\/D6-HkjFg2mw\/s1600\/flashrom.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"340\" src=\"http:\/\/4.bp.blogspot.com\/-CwG7cjSp_xs\/VVHX3ppQ8II\/AAAAAAAABF4\/D6-HkjFg2mw\/s640\/flashrom.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe SPI programmer was able to detect the flash chip, but most of the data being read was erroneous. On investigation I found that the VCC (power) wire had come unstuck from the test point and was now hanging off the desk. So if the VCC wire wasn't connected and the system wasn't plugged in, how was it reading the flash chip?\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter more experimentation I found that the circuit was set up in such a way that some of the voltage being sent to the MISO pin (about 1.2v of it) was somehow feeding back onto the VCC rail and powering the chip....wat. As I've said I'm not an electronics expert, and this had me completely baffled, but it also showed me that reading the chip in circuit was possible, i just needed to learn its secrets.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EThe Solution\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter extensively more experimentation with a side order of experimentation and failure, I found that holding the system in reset (the solution to most ICP problems) was actually the only issue. I had been leaving the JTAG connected to the system and it was pulling the reset pin low (holding it in reset), so when I wasn't holding the system in reset the JTAG was. After disconnecting the SRST (reset) pin of the JTAG, everything worked perfectly as long as the disk wasn't plugged in and I powered the flash chip directly. It seems that this system is designed for ICP to be done without holding it in reset and doing so causes issues.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv\u003EHere is the updated image from the last article.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Wd8fhDBYNxA\/VVHTfkbxxeI\/AAAAAAAABFo\/-uNjbNSQ4W8\/s1600\/ICP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"622\" src=\"http:\/\/3.bp.blogspot.com\/-Wd8fhDBYNxA\/VVHTfkbxxeI\/AAAAAAAABFo\/-uNjbNSQ4W8\/s640\/ICP.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIf you have a USB device which allows for SPI programming and is supported by \"flashrom\", like I do. You can connect it to the computer and use flashrom to read, write, and erase the flash. The TUMPA is an especially nice board because it has 2 channels, so you don't have to disconnect the JTAG to use SPI.\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003C\/h2\u003E\u003Ch2 style=\"text-align: left;\"\u003EDon't reinvent the wheel they said, It's a waste of time they said\u003C\/h2\u003E\u003Cdiv\u003EBefore i started hacking I'd decided to read other people's research to get a good idea of where to start. Resourceful, right? Well it actually turns out that most of the research I've based mine on was either wrong or just doesn't apply to this hard disk.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI was under the impression that when connecting the JTAG and issuing a \"reset halt\" command, the system would be halted before any code was run, and I could step through the bootstrap while it read the bootloader from flash and execute it, this wasn't the case.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAfter playing around by writing my own code to the flash, i realized that it's is being read into memory and executed long before the system is halted. In fact it seems like the code at 0xFFFF0000 is just some kind of debug console which is only jumped to if a halt command is issued, or the reading \/ executing the code from flash fails. By the time the JTAG is able to connect and issue a command, the entire kernel has already been loaded and initialized, which explains why I couldn't set any breakpoints on the bootloader.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI can write a breakpoint to the flash so that an exception is generated and the system fails to load, then remove the breakpoint and manually jump back to the bootloader, but for whatever reason the system doesn't boot properly the second time. This isn't a huge issue because I can still debug the bootloader up until the a certain point (as long as any code I write is run during early boot, I can debug that too), but until I can find why it fails the second time, there is a window of time between the late boot stage and early kernel initialization where I can't debug.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ESuccess\u003C\/h2\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-6S4YPz4Jllc\/VVHowXsgdYI\/AAAAAAAABGI\/PImx2nl6NZo\/s1600\/CodeInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"242\" src=\"http:\/\/1.bp.blogspot.com\/-6S4YPz4Jllc\/VVHowXsgdYI\/AAAAAAAABGI\/PImx2nl6NZo\/s640\/CodeInjection.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EMy main goal was to inject code into the firmware both by running an executable on the target computer and with physical access to the hard drive, which I've achieved. Now I'll just poke around and see what I can do with it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIf you're wondering how easy it would be for an attacker to infect a hard drive's firmware, here are two quick ways they could to do it.\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003ESending firmware update commands over the SATA interface from the host computer (requires root\/admin).\u003C\/li\u003E\u003Cli\u003ECreate a portable SPI programmer that can flash the firmware by being pressed against the test points on the bottom of the hard drive (would only take about 5 seconds).\u0026nbsp;\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003ESomething...something...aliens...something...something...government... *puts on tinfoil hat*\u003Cbr \/\u003E\u003Cbr \/\u003EPart 6 (Final part):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-final-part.html\u003C\/a\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/828040756229904941\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/828040756229904941"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/828040756229904941"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html","title":"Hard Disk Firmware Hacking (Part 5)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-CwG7cjSp_xs\/VVHX3ppQ8II\/AAAAAAAABF4\/D6-HkjFg2mw\/s72-c\/flashrom.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-840112304280512660"},"published":{"$t":"2015-05-05T14:18:00.000-07:00"},"updated":{"$t":"2015-05-18T07:58:01.057-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 4)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EIt seems that the bootstrap code is just scattered around various memory addresses and there's no simple way to dump all of it, so i decided to just dump a chunk of memory from 0x00000000 and look for any reference to addresses outside of that chunk (allowing me to build up a basic map of the code).\u003Cbr \/\u003E\u003Cbr \/\u003EAlthough the exact addresses vary between disk models, my layout should give you a good idea where to look.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E0x00000000 - 0x0000A520\u003C\/li\u003E\u003Cli\u003E0x0000EA24 - 0x00014F74\u003C\/li\u003E\u003Cli\u003E0xFFE19E00 - 0xFFE34D9A\u003C\/li\u003E\u003Cli\u003E0xFFFF2800 - 0xFFFF2800\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EAfter poking around, i found it was reading some code into memory from somewhere, which I assumed to be the flash.\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-duSheH_MD-U\/VUkdUZpR2wI\/AAAAAAAABEs\/nLKJcQUG0q4\/s1600\/Flash_Snippet.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"480\" src=\"http:\/\/3.bp.blogspot.com\/-duSheH_MD-U\/VUkdUZpR2wI\/AAAAAAAABEs\/nLKJcQUG0q4\/s1600\/Flash_Snippet.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EFirst few bytes of the flash\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EThe flash starts with a table which spans from 0 to 0x120 (the start of the first block), each table entry is 32 bytes and follows the same format (see: image). Each block has an id from 1 to n, with the exception of the first block which is always 0x5A.\u003Cbr \/\u003E\u003Cbr \/\u003EThe block at 0x5A is some kind of bootloader which likely reads and decompresses the rest of the blocks from flash, but I'm not sure yet as it's proving a problem to reverse. I wanted to intercept this bootloader at the entry point, which sounds easy, it's not.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EAt some point during the bootstrap process my hardware breakpoints stop working, it could be that the processor is overwriting the register, remapping memory, or disabling them all together; but I've not found the issue yet. This means I can't simply set a breakpoint on the bootloader entry point (0x19000).\u003C\/li\u003E\u003Cli\u003EThe bootstrap code responsible for loading and executing the bootloader is in ROM, so I can't set software breakpoints either.\u003C\/li\u003E\u003Cli\u003EWatchpoints don't seem to work at all, even before my breakpoints stop working I can't get the code to break on any memory access.\u003C\/li\u003E\u003Cli\u003EMost of the code that isn't in ROM is using some kind of paging (aka overlaying), which reads certain regions of code into memory when they're needed, then replaces them when they're not, preventing the use of software breakpoints.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAll in all, this was proving to be must more of a pain than I expected so I decided the easiest option would be to buy a drive with an external EEPROM chip, instead of one built into the MCU. This way I could write software breakpoints directly to the flash chip with an EEPROM programmer.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-F2Xp2bH__Ls\/VUkjsE-joUI\/AAAAAAAABE4\/-Hb5E-6WtAU\/s1600\/PCB_Flash.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"424\" src=\"http:\/\/4.bp.blogspot.com\/-F2Xp2bH__Ls\/VUkjsE-joUI\/AAAAAAAABE4\/-Hb5E-6WtAU\/s1600\/PCB_Flash.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp;Hardware and firmware wise this disk is pretty much identical, except the firmware is now stored in a 256k SPI flash chip, instead of in the MCU's internal memory. The first thing I did was use a multimeter to see if there's anywhere on the top of the PCB i could connect to the flash chip (so I didn't have to desolder it or keep unscrewing the PCB from the disk).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-9Qx4gtQddrw\/VUkkxvnU1-I\/AAAAAAAABFE\/9JwlTaLgUYc\/s1600\/ISP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"624\" src=\"http:\/\/3.bp.blogspot.com\/-9Qx4gtQddrw\/VUkkxvnU1-I\/AAAAAAAABFE\/9JwlTaLgUYc\/s1600\/ISP.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EWP# and HOLD# are shorted to VCC, so they're not a problem and the rest of the required pins are brought out to the test pads around E11. I tried connecting my TUMPA's SPI interface to the test pads and using the flashrom software, but it was unable to detect the chip. I'm not sure if this is because my TUMPA isn't capable of in-circuit programming, or there is other stuff on the same data lines, but it I simply couldn't get it to work.\u003Cbr \/\u003E\u003Cbr \/\u003EMy new plan is to get a SOIC clip, a decent EEPROM programmer, and a desoldering station for if neither of the other option work; In the mean time I will be trying to find out what's stopping my breakpoints from working and see if i can remedy that. I'll probably not have another update until all my stuff gets delivered and I have a few days to try it all out.\u003Cbr \/\u003E\u003Cbr \/\u003EPart 5 (Writing the flash):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-5.html\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/840112304280512660\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/840112304280512660"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/840112304280512660"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html","title":"Hard Disk Firmware Hacking (Part 4)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-duSheH_MD-U\/VUkdUZpR2wI\/AAAAAAAABEs\/nLKJcQUG0q4\/s72-c\/Flash_Snippet.png","height":"72","width":"72"},"thr$total":{"$t":"4"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-1769415988767535306"},"published":{"$t":"2015-04-21T10:01:00.000-07:00"},"updated":{"$t":"2015-05-18T07:57:06.161-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 3)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EBefore we get started with part 3, I have a few updates regarding part 1 \u0026amp; 2.\u003Cbr \/\u003E\u003Cbr \/\u003EI've found that the reset pad on the JTAG header is not actually a system reset (SRST) but a TAP reset (TRST), which isn't very useful for debugging. Here is the updated layout with the system reset signal added (this will allow the 'reset halt' command to break on the reset vector, before any instructions are executed).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-qVcEybzOjTw\/VTZnIGTiHGI\/AAAAAAAABDk\/WuV-Osa__o8\/s1600\/JTAG_Pins_New.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"620\" src=\"http:\/\/2.bp.blogspot.com\/-qVcEybzOjTw\/VTZnIGTiHGI\/AAAAAAAABDk\/WuV-Osa__o8\/s1600\/JTAG_Pins_New.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EIn my case there wasn't a test pad for the SRST line, but there was a very small exposed bit of copper underneath the serial sticker, which was connected to the SRST pin of the CPU.\u003Cbr \/\u003E\u003Cbr \/\u003ECeriand on \u003Ca href=\"http:\/\/www.reddit.com\/r\/ReverseEngineering\/comments\/32jx6k\/dumping_the_firmware_of_a_hard_drive_with_jtag\/cqcbdda\"\u003EReddit\u003C\/a\u003E\u0026nbsp;pointed out that the JTAG header matches the footprint of a MICTOR connector (38 or 40 pin one usually), so if you don't want to do any soldering you could get yourself a MICTOR connector and cable.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-jrqTYAonEp4\/VTZpDQxXg4I\/AAAAAAAABDw\/MomiWLykIxE\/s1600\/MICTOR.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/3.bp.blogspot.com\/-jrqTYAonEp4\/VTZpDQxXg4I\/AAAAAAAABDw\/MomiWLykIxE\/s1600\/MICTOR.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EMICTOR 38 connector\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EI've also found out the hard way that older PSUs don't like to be used at extremely low voltage (components inside them tend to explode), so I recommend buying a decent AC to Molex power adapter (don't get the cheap ones, they die after a day).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-CdZRVUk7nmo\/VTZ9wGYlqyI\/AAAAAAAABEY\/Dc2MY-LgFK8\/s1600\/fuse.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"478\" src=\"http:\/\/3.bp.blogspot.com\/-CdZRVUk7nmo\/VTZ9wGYlqyI\/AAAAAAAABEY\/Dc2MY-LgFK8\/s1600\/fuse.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EApparently glass fuses like to explode and send shards flying everywhere\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003ELastly: because the JTAG header has an RTCK connector, you should be able to set adapter_khz in the openocd config to 0. The JTAG can then use adaptive clocking, which should prevent any timeout errors.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EBootstrap \u0026amp; Bootloader\u003C\/h2\u003E\u003Cdiv\u003EAfter some reversing I'm now convinced that the bootstrap code in Part 2 is not used during a normal boot. On execution it waits for some data on a port (most likely the serial port), then acts accordingly. If no data is found, the code goes into an infinite loop and the drive never boots.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-xuj5GZP_afA\/VTZwaEtvuPI\/AAAAAAAABD8\/sKqjDxDcOus\/s1600\/Bootstrap1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/4.bp.blogspot.com\/-xuj5GZP_afA\/VTZwaEtvuPI\/AAAAAAAABD8\/sKqjDxDcOus\/s1600\/Bootstrap1.png\" width=\"504\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOn this CPU the 0x1C00A000 - 0x1C00AFFF range appears to be mapped to various ports and test pads all around the PCB. Now, because I don't have the money for an oscilloscope or decent logic analyzer I'm going to have to pass up on mapping these ports, even though it would make things easier.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAll this code does is read some kind of switch which enters the system into a specific mode based on the value:\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E4 - Not sure, but it waits infinitely for a value on some port. My assumption is this code probably allows developers to read\/write\/erase the processor's internal flash.\u003C\/li\u003E\u003Cli\u003E3 - Jumps to the address in R4 (in my case this is 0, but that could be by design)\u003C\/li\u003E\u003Cli\u003E6 - A serial console which looks for ASCII bytes (r, w, j, h) on the serial port, allowing the developer to send read, write, jump, and halt commands.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003EI'm not familiar with how ports are mapped to memory, but\u0026nbsp;0x1C00A030 is always 0 while\u0026nbsp;0x1C00A03A is always 0xFFFF (which I assume means one is constant at a low voltage and the other constant at a high voltage).\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EInterestingly if we set a hardware breakpoints on \"cmp R1, #3\" and set R1 to 3, the code will jump to address 0 and boot normally (this is why I think 0 doesn't mean uninitialized). Let's see what's at address 0.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-zrF58vjNGAI\/VTZ53J46_gI\/AAAAAAAABEM\/7db5ldTf708\/s1600\/IVT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/4.bp.blogspot.com\/-zrF58vjNGAI\/VTZ53J46_gI\/AAAAAAAABEM\/7db5ldTf708\/s1600\/IVT.png\" width=\"614\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAddress 0 is usually RAM, but there's already valid code here, so it's quite likely the CPU temporarily maps address 0 to some area of the internal ROM during boot. This is a standard ARM IVT, which you'd see at the boot address of any ARM devices; making me think the bootstrap at 0xFFFF0000 is only executed if the CPU detects a JTAG is attached. Until I can buy a decent logic analyzer and figure which port allows us to control the bootstrap mode switch, the only apparent way to boot the disk normally with a JTAG attached is to perform a \"reset halt\" then manually set R1 to '3' just before the check.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn this case the boot code is all over the place with massive gaps between sections, my next step will be to map, dump, and reverse it. I'd probably have done that already, but my power adapter didn't arrive until yesterday.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EPart 4 (Working with spi flash):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/05\/hard-disk-firmware-hacking-part-4.html\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/1769415988767535306\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/1769415988767535306"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/1769415988767535306"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html","title":"Hard Disk Firmware Hacking (Part 3)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-qVcEybzOjTw\/VTZnIGTiHGI\/AAAAAAAABDk\/WuV-Osa__o8\/s72-c\/JTAG_Pins_New.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-6032170972835570724"},"published":{"$t":"2015-04-13T07:27:00.001-07:00"},"updated":{"$t":"2015-05-18T07:53:15.040-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 2)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003ENow that everything is ready to be connected, power up the hard drive an run openocd with the following command: openocd -f interface\/\u0026lt;your interface here\u0026gt;.cfg -f target\/test.cfg\u003Cbr \/\u003E\u003Cbr \/\u003Etest.cfg should be the configuration for the CPU used by your hard disk controller, for most marvell CPUs \u003Ca href=\"http:\/\/pastebin.com\/Rb94dGcq\"\u003Ethis config\u003C\/a\u003E should work. I'm not sure of the adapter_khz, so I've set mine to 100 (as long as this value is lower than the actual it should work).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-LaPlnReD1qU\/VSu2opfNfpI\/AAAAAAAABCY\/lmKMO2QpuRo\/s1600\/OpenOCD.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"362\" src=\"http:\/\/1.bp.blogspot.com\/-LaPlnReD1qU\/VSu2opfNfpI\/AAAAAAAABCY\/lmKMO2QpuRo\/s1600\/OpenOCD.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EIf all went well, you should see something along the lines of the above. Now you can use telnet to connect to port 4444 and issue commands.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/--SmjKvyASlQ\/VSu4usvuy1I\/AAAAAAAABCo\/OoomVlQIST8\/s1600\/Telnet.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"364\" src=\"http:\/\/2.bp.blogspot.com\/--SmjKvyASlQ\/VSu4usvuy1I\/AAAAAAAABCo\/OoomVlQIST8\/s1600\/Telnet.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThe Marvell chips used in hard disk controller aren't publicly documented; so if you want to know information such as their memory map, you'll have to sign a NDA and probably pay some money. Instead, what I'm going to do is try to figure out as much as I can from the firmware and possibly by probing the circuit.\u003Cbr \/\u003E\u003Cbr \/\u003EGetting the firmware isn't easy when you can't de-solder and dump the flash, so we'll have to work through the boot process. Most ARM CPUs begin executing at address 0xFFFF0000, this is known as the reset vector. If we dump 65536 bytes from this address, we'll find the bootstrap code which will be a good starting point.\u003Cbr \/\u003E\u003Cbr \/\u003EIn order o dump memory, we first need to halt the CPU, which can be done with the command \"reset halt\" (It's required that we first reset the system as we can't halt past a certain stage). If the reset command doesn't work for any reason e.g: RST pin of JTAG isn't connected to anything, you'll need to disconnect and reconnect the hard drive's power source then quickly tap into the JTAG and issue the halt command within a few second. Memory dumped with the command \"dump_image \u0026lt;file name\u0026gt; \u0026lt;address\u0026gt; \u0026lt;size\u0026gt;\".\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-U2NB2b6iLm4\/VSvaAyw4lJI\/AAAAAAAABDQ\/FlffCoLjxyg\/s1600\/Bootstrap.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"640\" src=\"http:\/\/1.bp.blogspot.com\/-U2NB2b6iLm4\/VSvaAyw4lJI\/AAAAAAAABDQ\/FlffCoLjxyg\/s1600\/Bootstrap.png\" width=\"576\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EWhen we disassemble the dumped image, it's some fairly small (4 kb) ARM bootstrap code, which should lead us to the rest of the firmware. I've not had much time to look, so I'll reverse the bootstrap code and post the next part when I've found the rest of the bootloader and kernel.\u003Cbr \/\u003E\u003Cbr \/\u003EPart 3 (Bootstrap analysis):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-3.html\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/6032170972835570724\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6032170972835570724"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6032170972835570724"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html","title":"Hard Disk Firmware Hacking (Part 2)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-LaPlnReD1qU\/VSu2opfNfpI\/AAAAAAAABCY\/lmKMO2QpuRo\/s72-c\/OpenOCD.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-5165513911128886853"},"published":{"$t":"2015-04-13T07:27:00.000-07:00"},"updated":{"$t":"2015-05-18T07:51:16.955-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"electronics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Hard Disk Firmware Hacking (Part 1)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EI've not been doing much in the windows malware world for a while now, because quite frankly I've run out of ideas and I'm totally bored. Recently I decided to take the jump into electronics \/ hardware hacking and people have suggested I post some of that here.\u003Cbr \/\u003E\u003Cbr \/\u003EA couple of years ago I started looking into BIOS rootkits (back before (U)EFI was mainstream). I was aware that most hardware had a BIOS type setup that is usually initialized during the POST phase of the boot process, so I was looking into the possibility of modifying \u0026nbsp;firmware to work in the same way as a BIOS rootkit would. My two main candidates were the GPU and Hard Disk, which I began looking into (but was mostly sandbagged by my lack of reverse engineering knowledge at the time).\u003Cbr \/\u003E\u003Cbr \/\u003EMy current project is on hold while I await the arrival of some expensive hardware which will allow me to overcome a setback (the manufacture disabled the JTAG interface prior to shipping), so I decided to have a play with something I saw on spritesmods in 2013 (\u003Ca href=\"https:\/\/spritesmods.com\/?art=hddhack\"\u003EHard disk hacking\u003C\/a\u003E).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EHard Disk Hacking\u003C\/h2\u003E\u003Cdiv\u003EI found an old Western Digital hard drive in pretty good condition, so I unscrewed the controller and had a look.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-dzR0lJk-giQ\/VSudN6bYhAI\/AAAAAAAABBE\/e1pn9MdYCa4\/s1600\/HDD_Controller.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"428\" src=\"http:\/\/2.bp.blogspot.com\/-dzR0lJk-giQ\/VSudN6bYhAI\/AAAAAAAABBE\/e1pn9MdYCa4\/s1600\/HDD_Controller.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EThis is where I'd put my flash...if i had any.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe guy on spritesmods had dumped the firmware by de-soldering the flash chip and dumping it manually, the only problem is the red circle is were the flash chip should be (thanks obama).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003EAbove the red circle is a Marvell 88i8846-TFJ2 ARM processor which has internal flash. I don't fancy my chances of de-soldering the entire CPU and trying to access the memory manually, so I decided to go for the JTAG method.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-MGVDOTF1i3w\/VSuf-U_X53I\/AAAAAAAABBQ\/mWXDn20d6Bc\/s1600\/JTAG_Pins.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"621\" src=\"http:\/\/1.bp.blogspot.com\/-MGVDOTF1i3w\/VSuf-U_X53I\/AAAAAAAABBQ\/mWXDn20d6Bc\/s1600\/JTAG_Pins.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EThe header for the JTAG is fairly well known, though it can be upside down (in my case the first pin of the header is denoted by a '1' on the board). Pins 6 to 11 are all we need for the JTAG and the metal circle, which is the ground.\u003Cbr \/\u003E\u003Cbr \/\u003EAs you can probably see, I've decided not to solder the pins. This is for two reasons: They're rusty and they're too close together, so I could easily short the board. Instead I opted to use the test pads, which can be found using the 'continuity' mode on the multimeter (thanks to @\u003Ca href=\"https:\/\/twitter.com\/McGrewSecurity\"\u003EMcGrewSecurity\u003C\/a\u003E for the tip).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-kV58jqhN-ag\/VSujUwOxFSI\/AAAAAAAABBc\/RWckRLsyb9c\/s1600\/Multimeter_Continuity.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"480\" src=\"http:\/\/1.bp.blogspot.com\/-kV58jqhN-ag\/VSujUwOxFSI\/AAAAAAAABBc\/RWckRLsyb9c\/s1600\/Multimeter_Continuity.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EBy setting this mode on the multimeter it will show us the resistance between two points, the '1' means total resistance (the points likely aren't even connected) and '0.01' is a good connection. The meter will also emit and audible (and incredibly annoying) high pitch tone when the resistance is low, so we only really need to use the tone to tell if two points are connected.\u003Cbr \/\u003E\u003Cbr \/\u003EWith the hard drive disconnected simply put one of the multimeter probes on the header pin you want to locate the test pad for, then move the other probe around the test pads in the area where mine are until you hear a beep. On my board you'll see there are visible data lines running from the header pins to the test pads, which gives you a good idea where to look (depending on the quality of your eyesight).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv\u003EI didn't want the hard drive plugged into my computers power supply in case something went wrong, and my computer is the opposite side of the room, so I didn't want to try and build a 10m long SATA cable either. Here's my solution (disclaimer: If you injure yourself blame someone else i.e. not me).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-gWIv43MlWL8\/VSumonMYl3I\/AAAAAAAABBo\/nJJDCrVC2cI\/s1600\/PSU_Shorted.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"466\" src=\"http:\/\/2.bp.blogspot.com\/-gWIv43MlWL8\/VSumonMYl3I\/AAAAAAAABBo\/nJJDCrVC2cI\/s1600\/PSU_Shorted.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003EIf you have a spare PSU lying around, you can short the third and forth pin of the ATX header to turn it on without connecting it to a motherboard. My PSU was very old and missing a fan, so I was pleasantly surprised when nothing shorted or caught fire (My entire house is on the same circuit breaker, so I'd be spend the next hour rebooting various devices).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-uL2S05hTifU\/VSuopuew0XI\/AAAAAAAABB0\/Vo62WgYiQoE\/s1600\/IDE_SATA.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"200\" src=\"http:\/\/3.bp.blogspot.com\/-uL2S05hTifU\/VSuopuew0XI\/AAAAAAAABB0\/Vo62WgYiQoE\/s1600\/IDE_SATA.png\" width=\"200\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-22bkCWoNHNk\/VSupjTm7vpI\/AAAAAAAABB8\/IwaoIjF-OjY\/s1600\/TUMPA.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"\u003E\u003Cimg border=\"0\" height=\"153\" src=\"http:\/\/4.bp.blogspot.com\/-22bkCWoNHNk\/VSupjTm7vpI\/AAAAAAAABB8\/IwaoIjF-OjY\/s1600\/TUMPA.png\" width=\"200\" \/\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EI use a $5 SATA to USB connector, which is perfect for the data side of the hard disk connection. The red board on the right is a $30 TIAO USB Multi-Protocol Adapter, which is FT2232H based and also does SPI as well as JTAG.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-lS6ScJ9a6Aw\/VSuqeQk-g1I\/AAAAAAAABCI\/x5aH3yF0w5Q\/s1600\/Full_Setup.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"460\" src=\"http:\/\/4.bp.blogspot.com\/-lS6ScJ9a6Aw\/VSuqeQk-g1I\/AAAAAAAABCI\/x5aH3yF0w5Q\/s1600\/Full_Setup.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EI really need a bigger desk\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EHere we have a stupidly over-complicated setup due to the fact my Windows desktop reside on the other side of the room: The iMac is running a Linux virtual machine for the JTAG software (FTDI driver and OpenOCD) because they're a pain to install on Windows or OSX . The Windows system (left monitor) is running IDA for reversing\/debugging (I plan on trying to connect IDA to the OpenOCD GDB service over my local network when I start doing live analysis).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EPart 2 (Dumping the bootstrap):\u0026nbsp;\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-2.html\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/5165513911128886853\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-1.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5165513911128886853"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5165513911128886853"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/hard-disk-firmware-hacking-part-1.html","title":"Hard Disk Firmware Hacking (Part 1)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-dzR0lJk-giQ\/VSudN6bYhAI\/AAAAAAAABBE\/e1pn9MdYCa4\/s72-c\/HDD_Controller.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-6836846022235055056"},"published":{"$t":"2015-04-02T01:17:00.001-07:00"},"updated":{"$t":"2015-04-02T01:20:28.679-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"windows internals"}],"title":{"type":"text","$t":"Intercepting all System Calls by Hooking KiFastSystemCall"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EUsually I don't post things like this, but because KiFastSystemCall hooking only works on x86 systems and doesn't work on Windows 8 or above, it no longer has much use in malware. There are also multiple public implementations for this method, just not very elegant, which I hope to correct.\u003Cbr \/\u003E\u003Cbr \/\u003EIf you haven't read my previous article about this topic, or need a refresher, you can find it \u003Ca href=\"http:\/\/www.malwaretech.com\/2014\/06\/usermode-system-call-hooking-betabot.html\"\u003Ehere\u003C\/a\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EPerforming a System Call\u003C\/h2\u003E\u003Cdiv\u003EKiFastSystemCall has a very strange calling convention (if you can call it that). Each native function (Ex: NtCreateFile) corresponds to a function with the same name in the SSDT. In order to make the transition from user mode to kernel mode, the instruction \"sysenter\" is used.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-mFGfdRzXA3A\/U58ZBxRKf7I\/AAAAAAAAAf0\/mstM2HJclRg\/s1600\/system+call+path+32-bit.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-mFGfdRzXA3A\/U58ZBxRKf7I\/AAAAAAAAAf0\/mstM2HJclRg\/s1600\/system+call+path+32-bit.png\" height=\"190\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EI don't want to go into great detail on how the sysenter instruction actually enters kernel mode, as that would take up the entire page, but I'll explain the basics:\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EThe SSDT is an array of addresses for each native function.\u003C\/li\u003E\u003Cli\u003EThe number you see being moved into the eax register is known as its ordinal, and is the position within the SSDT where that functions address is located.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EWhen the sysenter instruction is executed the kernel reads the ordinal from eax and uses it to call the corresponding function in the SSDT, before returning execution to usemode.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003ESomething important to note is that the native function simply calls KiFastSystemCall and doesn't even set up a stack frame, meaning the address of the first parameter can only be accessed using [esp+8], so we can't just hook KiFastSystemCall with a C function, as this matches no standard calling convention (which is what makes the method so tricky to implement).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EDispatching Calls\u003C\/h2\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003ESince the last article I've improved on the dispatching method, which now has two purposes:\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003EDetermining which native function made the call to KiFastSystemCall, so we can properly handle it.\u003C\/li\u003E\u003Cli\u003ESetting up the stack in such a way that we can access the parameters using plain C.\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EDispatching\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003ENormally we'd hook each individual function we want to intercept with a single handler (proxy), but all native functions call KiFastSystemCall, so we need to think differently.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003EAs I explained earlier, the SSDT is an array of addresses and the ordinal (which is in eax when KiFastSystemCall is invoked), corresponds to the position of that function's address within the SSDT. Using this knowledge we can do the same: We create an array of addresses for the the proxy functions and use the ordinal to locate the correct handler using the ordinal in eax. For our SSDT each entry will be 8 bytes, so the handler needs to be placed at our_ssdt[2*ordinal] (in order to get the ordinal for a native function we just read 4 bytes starting at the 2nd byte of the function).\u0026nbsp;\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EYou're probably wondering why each entry for our SSDT is 8 bytes, instead of 4; this is because in order to set up the stack before calling the proxy, we need to know how many parameters were passed to KiFastSystemCall (we store the proxy address as the first 4 bytes and the number of parameter as the rest).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EPreparing the Stack\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EWhen KiFastSystemCall is invoked, there are two return addresses between the stack pointer and the function parameters (the return from KiFastSystemCall to the native function and the return from the native function). In order to call the proxy function we will get the number of parameter for the function from our_ssdt[2*ordinal+4] and push them to the stack again, in stdcall format (the proxy function is responsible for removing them from the stack). The last thing that is pushed to the stack before we call the proxy is the eax register (the ordinal), we will need this later if we wish to call the original, non hooked, version of KiFastSystemCall.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EThe Code\u003C\/h2\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/github.com\/MalwareTech\/FstHook\"\u003EFstHook\u003C\/a\u003E - This is my own C\u0026nbsp;library which allows a program to easily hook any number of native function using a single hook on KiFastSystemCall.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EEverything is pretty well commented and self explanatory, but if you have any questions feel free to email me on admin@malwaretech.com.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/6836846022235055056\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/intercepting-all-system-calls-by.html#comment-form","title":"1 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6836846022235055056"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6836846022235055056"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/04\/intercepting-all-system-calls-by.html","title":"Intercepting all System Calls by Hooking KiFastSystemCall"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-mFGfdRzXA3A\/U58ZBxRKf7I\/AAAAAAAAAf0\/mstM2HJclRg\/s72-c\/system+call+path+32-bit.png","height":"72","width":"72"},"thr$total":{"$t":"1"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-3134589686540107122"},"published":{"$t":"2015-03-23T10:31:00.000-07:00"},"updated":{"$t":"2015-03-31T20:20:58.157-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"security"}],"title":{"type":"text","$t":"Code Mutation (Polymorphism) "},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv style=\"text-align: left;\"\u003EBefore we start it's probably best to explain some things:\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cb\u003ESignature \u003C\/b\u003E- A pattern of bytes used by an antivirus to identify malicious executables, this could be a string, parts of a function, or a hash.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cb\u003ECrypting \u003C\/b\u003E- This is the most common way of evading antivirus detections, it works by encrypting the malicious executable so the antivirus cannot match the malicious code to existing signatures.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cb\u003EPayload\u003C\/b\u003E - The malicious executable which is encrypted to evade detections, this is attached to the stub in some way (stored as a resource, added after then end of file, appended to a new or existing section).\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cb\u003EStub\u003C\/b\u003E - A simple program responsible for decrypting the payload and executing it in memory. Due to the payload being encrypted, antiviruses will attempt to generate signatures to match the stub's code, but because the stub is small and simple it can be easily modified to evade existing signatures.\u0026nbsp;\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cbr \/\u003EPolymorphism\u003C\/h2\u003E\u003Cdiv\u003EPolymorphism is a solution to a problem mainly found with worms\/botnet: When an AV adds a new signature that detects the malicious executable, the infected file will be quarantined, leaving the malware running in memory until reboot. If a botmaster is running a botnet with thousands of bots, each time the stub is detected he's likely to lose a few hundred bots, his only choice: To keep updating the bots with a new stub before the previous one is detected (which for large botnets can be every few hours), leaving the hacker with very little free time. A solution to this would be to write malware capable of programmatically generating a unique stub and replacing the old one on execution, resulting in each computer having a different stub; this is know as polymorphism.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003Ethere's a few ways to programmatically create unique code that performs the same function as the previous.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EBlock Mutation\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EA lot of assembly instructions can be freely movable, whilst some cannot. An instruction using a relative address (such as a jump or call), when moved will point to a different location, breaking the code; freely movable instructions such as those using absolute addresses or only registers can be moved anywhere.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EBlock based polymoprphism works by breaking the code down into small blocks, which are then numbered; the number specifies the order in which they execute and the block is either marked as movable or immovable based on its containing instruction. The mutation engine can then reorder, relocate, or separate the movable block; using jumps or similar instructions to link them together so that they execute in the correct order. Junk code (random instructions which are never actually executed) can also be added between blocks to add more entropy and change the executable size.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003ERegister Swapping\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EIt's possible to write the code in such a way that registers can easily be switched out, for instance all occurrences of edx within a function could be replaced with ecx, changing a lot of bytes within the application. The only problem with this approach is there's only a few usable registers, making it easy to exhaust all possible combinations, and it's still possible to generate signatures based on the layout of the instructions.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EInternal Assembler +\u0026nbsp;Intermediate\u0026nbsp;Language\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EA very effective approach is to embed an assembler within the payload, as well as create an intermediate language (IL) which the polymorphic engine uses to create ASM on the fly. A simple example would be the following IL code.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003Epmov Reg1, 5\u003C\/div\u003E\u003Cdiv\u003Eadd eax, Reg1\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn this example instructions prefixed with p will be mutated at an instruction level, whilst those without a prefix will just be assigned a register and compiled as ASM. The IL engine would then use a seed to randomly generate the p-prefixed instructions by picking an instruction, or group of instructions, to perform the operation, as well as assign a register to Reg1 and Reg2. \u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe array of instructions to handle pmov would look something like this:\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003Epush val\u003Cbr \/\u003Epop reg\u003C\/li\u003E\u003Cli\u003Emov reg, val\u003C\/li\u003E\u003Cli\u003Exor reg, reg\u003C\/li\u003E\u003Cli\u003Eadd reg, val\u003C\/li\u003E\u003C\/ol\u003E\u003C\/div\u003E\u003Cdiv\u003EOnce the engine has picked which instruction it wishes to use, it would then fill in the register and value, then compile it to ASM. Here are some examples of final outputs.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003Epush 5\u003Cbr \/\u003Epop edx\u003Cbr \/\u003Eadd eax, edx\u003C\/li\u003E\u003Cli\u003Emov ecx, 5\u003Cbr \/\u003Eadd eax, ecx\u003C\/li\u003E\u003Cli\u003Exor ebx, ebx\u003Cbr \/\u003Eadd ebx, 5\u003Cbr \/\u003Eadd eax, ebx\u003C\/li\u003E\u003C\/ol\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EBy using an IL, we avoid having to first disassemble the stub code before mutating it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EMetamorphism\u003C\/b\u003E\u003C\/h2\u003E\u003Cdiv\u003EToday advanced metamorphic malware which can efficiently evade signature detection is nearly impossible, but back in the days of DOS \/ 95 \/ 98 viruses, it has been achieved multiple times. The idea of metamorphism is to take polymorphism a step further and instead of encrypting the malicious executable and mutating the stub, the entire malicious executable is mutated, including the code required to perform the mutation.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EMalware that is required to create a new, unique copy of itself on every propagation is also required to disassemble previously mutated code and regulate size (because instructions can be mutated into multiple instructions, it's important to be able to do the opposite or the executable grows almost exponentially with every mutation). Due to the amount of consideration and effort that would have to go into creating modern metamorphic malware, most programmers opt to use polymorphism instead, as this allows them to generate output from a temporary representation. A simple mistake during disassembling could result in the executable ceasing to work, and it's a lot harder to debug and test metamorphism in large applications.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003C\/h2\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/3134589686540107122\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/03\/code-mutation-polymorphism.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3134589686540107122"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3134589686540107122"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/03\/code-mutation-polymorphism.html","title":"Code Mutation (Polymorphism) "}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"4"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-5978684915936206634"},"published":{"$t":"2015-03-10T00:43:00.000-07:00"},"updated":{"$t":"2015-03-10T00:43:51.563-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"bootkits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"forensics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"windows internals"}],"title":{"type":"text","$t":"Bootkit Disk Forensics - Part 3"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: left;\"\u003EGetting Original Pointers\u003C\/h2\u003E\u003Cdiv\u003EXP is a little more complicated than newer systems due to the use of a single driver for both port and miniport; however, getting the original pointers is fairly straight forward depending on how you do it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EIRP_MJ_SCSI \u0026amp; DriverStartIo - Method 1 (Windows XP)\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EA common method is to programmatically disassemble the miniport's DriverEntry, looking for the code which initializes the driver's object, then you can extract and calculate the addresses from \"mov [esi+30h], offset\" and \"mov [esi+74h], offset\" for DriverStartIo and IRP_MJ_SCSI respectively.\u0026nbsp;\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-QMMndv--hi4\/VP52P81kkcI\/AAAAAAAABAI\/NfXrRS9wLeg\/s1600\/DriverObjectInit.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-QMMndv--hi4\/VP52P81kkcI\/AAAAAAAABAI\/NfXrRS9wLeg\/s1600\/DriverObjectInit.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EAn example of code initializing the driver object (taken from atapi.sys)\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003EThe obvious problem with this method is the initialization code may not be in DriverEntry, but a sub function called from it (it may even be necessary to follow jumps). It's also not guaranteed that the instruction will use esi as the pointer to the driver object or an immediate for the function address, in fact you're probably going to have to account for quite a few different instructions.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EIRP_MJ_SCSI \u0026amp; DriverStartIo - Method 2\u0026nbsp;\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;(Windows XP)\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EIn my tests, it was possible to simply call the DriverEntry of the miniport driver with the parameters from your own driver entry, thus having the miniport set up your driver's object as if it were its own. The only issue with this method is if the driver uses GsDriverEntry (it usually does), the entry point will be invalidated after the driver is initialized, so you cannot call it. To deal with GsDriverEntry you'd first need to load the original image from disk, then search until you reach an unconditional relative jump (this is the offset to real entry point and you can use it to calculate the same address within the loaded driver).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EIRP_MJ_SCSI\u0026nbsp;\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;(Windows Vista+)\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EOn newer systems, things are wonderfully easier: There's no DriverStartIo field and you can initialize all the major functions in your DriverObject with a call to AtaPortInitialize, ScsiPortInitialize, or StorPortInitialize which are all exported from the relevant port drivers (ataport.sys, scsiport.sys, or storport.sys).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ch2\u003EBypassing Inline Hooks\u003C\/h2\u003E\u003C\/div\u003E\u003Cdiv\u003EAlthough not many bootkits actually perform inline hooking on miniports, it's worth taking care of. You'll need to read a the original miniport or port driver's file into memory, then do a bit of pointer math to calculate the addresses of \u0026nbsp;IRP_MJ_SCSI or DriverStartIo within the clean image. I'm not too sure of the best way to call the clean functions, but here are 2 viable methods to chose from.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003ETrampoline\u003C\/b\u003E\u003Cbr \/\u003EUsually a hook is placed within the first few bytes of a function, so you can simply read and relocate the first few bytes from the clean function into a buffer, then append it with a jump to the same offset within the real driver(this is the same way a hooking engine would call the unhooked version of a function).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EManual Mapping\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EA more difficult but effective method is to manually map a clean copy of the driver into memory, then relocate it so that all absolute instructions will reference the real driver, meaning you don't have to worry about initializing any global variables or such.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ECreating a Clean Call Path\u003C\/h2\u003E\u003Cdiv\u003EDue to the fact a lot of bootkits run persistence threads for replacing any driver object hooks which get removed, you don't want to unhook the real driver but instead create a parallel one, so you can maintain your own hook-free call path.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EStep 1 (XP \u0026amp; Vista)\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003EGet the device object for the boot disk miniport, this is usually \\Device\\Harddisk0\\Dr0\u003C\/li\u003E\u003Cli\u003EUse the size field of the device object to allocate some non paged memory and copy the entire object\u0026nbsp;(this is your clean miniport).\u003C\/li\u003E\u003Cli\u003ESet the DriverObject field to point to your own driver's object, in which you've set the IRP_MJ_SCSI and DriverStartIo field appropriately (DriverStartIo can be skipped on Vista+).\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EStep 2 (XP Only)\u003C\/b\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003ESet the DeviceExtension field of your \u003Cb\u003E\u003Cu\u003Eclean miniport\u003C\/u\u003E\u003C\/b\u003E device object to point to directly after its device object (DeviceObject + sizeof(DEVICE_OBJECT)).\u003C\/li\u003E\u003Cli\u003EGet the address stored at offset\u0026nbsp;0x5C into your \u003Cu\u003E\u003Cb\u003Eclean\u0026nbsp;miniport's\u003C\/b\u003E\u003C\/u\u003E\u0026nbsp;device extension and check it's valid (this is the\u0026nbsp;address of the corresponding port's device extension).\u003C\/li\u003E\u003Cli\u003ERead the addresses stored at offset 0x0C into the\u0026nbsp;\u003Cb\u003E\u003Cu\u003Eport's\u003C\/u\u003E\u003C\/b\u003E device extension (this is the address of the port's device object).\u003C\/li\u003E\u003Cli\u003EUse the size field of the \u003Cb\u003E\u003Cu\u003Eport's\u003C\/u\u003E\u003C\/b\u003E\u0026nbsp;device object to\u0026nbsp;allocate some non paged memory and copy the entire object (this is your clean port).\u003C\/li\u003E\u003Cli\u003ESet the DeviceExtension field of your \u003Cu\u003E\u003Cb\u003Eclean port's\u003C\/b\u003E\u003C\/u\u003E device object to point to directly after its device object (DeviceObject + sizeof(DEVICE_OBJECT)).\u003C\/li\u003E\u003Cli\u003ESet the DriverObject\u0026nbsp;field of your \u003Cb\u003E\u003Cu\u003Eclean\u0026nbsp;port's\u003C\/u\u003E\u003C\/b\u003E\u0026nbsp;device object to point\u0026nbsp;to your own driver's object, in which you've set the IRP_MJ_SCSI field appropriately.\u003C\/li\u003E\u003Cli\u003EChange offset 0x5C into your \u003Cb\u003E\u003Cu\u003Eclean\u0026nbsp;miniport's\u003C\/u\u003E\u003C\/b\u003E\u0026nbsp;device extension to contain the address of the clean \u003Cb\u003E\u003Cu\u003Eport's\u003C\/u\u003E\u003C\/b\u003E device extension.\u003C\/li\u003E\u003Cli\u003ESet offset 0x0C\u0026nbsp;into the \u003Cb\u003E\u003Cu\u003Eclean port's\u003C\/u\u003E\u003C\/b\u003E\u0026nbsp;device extension to contain the address of the \u003Cb\u003E\u003Cu\u003Eclean\u0026nbsp;port's\u003C\/u\u003E\u003C\/b\u003E\u0026nbsp;device object.\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EUsing the Clean Path\u003C\/h2\u003E\u003Cdiv\u003EYou're going to need to build a raw SCSI request which is pretty complicated; however, the Chinese are already a step ahead, so you can look to\u0026nbsp;\u003Ca href=\"http:\/\/www.cnblogs.com\/fanzi2009\/archive\/2009\/05\/07\/1451201.html\"\u003Ethis example\u003C\/a\u003E\u0026nbsp;for help (This request can be issued by passing the clean miniport device object and the IRP to IofCallDriver).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIt's important to note that miniport drivers are PnP, so if you don't create any devices (IoCreateDevice): the driver will be unloaded as soon as DriverEntry returns, if you do: the driver can't be unloaded at all. Although it's not recommended, you can set the driver back to a legacy driver by setting the AddDevice pointer within the driver's extension to 0, allowing the driver to be unloaded normally.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EConclusion\u003C\/h2\u003E\u003Cdiv\u003EThis concludes my 3 part series, any feedback in the comments would be greatly appreciated and will be taken into consideration when I create a whitepaper version of the series in a few weeks.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EOther resources of note\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"http:\/\/www.aall86.altervista.org\/TDLRootkit\/TDL4_Analysis_Paper.pdf\"\u003EDebugging TDL4\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/dl.dropboxusercontent.com\/u\/15169167\/Subverting_Bootkits_Using_CrashDump_Stack.pdf\"\u003ESubverting Bootkits using the Crash Dump Driver Stack\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/www.blackhat.com\/docs\/us-14\/materials\/us-14-Haukli-Exposing-Bootkits-With-BIOS-Emulation-WP.pdf\"\u003EExposing Bootkits With BIOS Emulation\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/5978684915936206634\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-3.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5978684915936206634"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5978684915936206634"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-3.html","title":"Bootkit Disk Forensics - Part 3"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-QMMndv--hi4\/VP52P81kkcI\/AAAAAAAABAI\/NfXrRS9wLeg\/s72-c\/DriverObjectInit.png","height":"72","width":"72"},"thr$total":{"$t":"4"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-7951996627479306953"},"published":{"$t":"2015-03-04T12:03:00.000-08:00"},"updated":{"$t":"2015-04-02T21:34:32.893-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"bootkits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"forensics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"windows internals"}],"title":{"type":"text","$t":"Bootkit Disk Forensics - Part 2"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch2 style=\"text-align: left;\"\u003EDriverStartIo\u003C\/h2\u003E\u003Cdiv\u003EAs I explained in the previous article: DriverStartIo is used by older miniports to actually perform the disk I\/O, it takes 2 parameters (a device object and an IRP), exactly the same as IoCallDriver does. The call to DriverStartIo is done with IoStartPacket; however, the device object passed is not that of the miniport, but instead a device associated with the port the target disk is connected to (in my case IdePort1).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIRP_MJ_SCSI points to IdePortDispatch in atapi.sys, by disassembling it we can see exactly how the required device object is retrieved from the DeviceExtension field of the miniport's device object.\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-elDVj88Qutg\/VPYq4a4bOBI\/AAAAAAAAA9w\/yJafDuu8cm4\/s1600\/AtaPortDispatch.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-elDVj88Qutg\/VPYq4a4bOBI\/AAAAAAAAA9w\/yJafDuu8cm4\/s1600\/AtaPortDispatch.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ETo start with, ebx is the address of the device extension (which is shared between all atapi devices).\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003EThe call logic is something like this:\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003EGet the miniport's device extension from its device object (passed to us in the call).\u003C\/li\u003E\u003Cli\u003EGet IdePort1's device extension from offset 0x5C into the miniport's device extension.\u003C\/li\u003E\u003Cli\u003EGet IdePort1's device object from offset 0x0C into its device extension.\u003C\/li\u003E\u003Cli\u003ECall IoStartPacket with the IRP and IdePort1's device object.\u003C\/li\u003E\u003C\/ol\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-oYTqA-I34z8\/VPYvawAjrSI\/AAAAAAAAA98\/lZ5zvpIIK70\/s1600\/ObjectRelationship.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-oYTqA-I34z8\/VPYvawAjrSI\/AAAAAAAAA98\/lZ5zvpIIK70\/s1600\/ObjectRelationship.png\" height=\"264\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EThe relationship between the various objects.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003EAs both the miniport and IdePort devices are created by atapi.sys, the DriverObject field of both devices' objects point to the same driver object; thus, hooking DriverStartIo is as simple as replacing the address in the driver's object. \u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EDetecting DriverStartIo hook with WinDbg\u003C\/h2\u003E\u003Cdiv\u003EFor basic DriverStartIo hook detection we can simply follow the same process as for major function hooks: First, we find the boot disk and list it's stack.\u003C\/div\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-uWz6wwzeQcs\/VPc1WMMJ2yI\/AAAAAAAAA-Q\/znycrY-NXo0\/s1600\/DeviceStackClean.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-uWz6wwzeQcs\/VPc1WMMJ2yI\/AAAAAAAAA-Q\/znycrY-NXo0\/s1600\/DeviceStackClean.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EDevice stack for boot device on a clean system\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-4b0oScbtnkU\/VPc2U2lV-YI\/AAAAAAAAA-k\/H_sW59jnvHM\/s1600\/DeviceStackTdl4.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-4b0oScbtnkU\/VPc2U2lV-YI\/AAAAAAAAA-k\/H_sW59jnvHM\/s1600\/DeviceStackTdl4.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EDevice stack on a TDL4 infected system.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EAs I explained in the previous article, modifications made by TDL4 will cause the !drvobj and !devobj commands to think the object is invalid, it's not. You will probably want to check each driver object in the stack (for the invalid DeviceObject you can again use \"dt _DEVICE_OBJECT \u0026lt;address\u0026gt;\" to find the DriverObject field).\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EWith most bootkits, the lowest level driver is always the one hooked, so I'll use this in my example.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-ilPyqIt7MZQ\/VPdfyW1oziI\/AAAAAAAAA_o\/F7O03d_kFCI\/s1600\/DriverObject.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-ilPyqIt7MZQ\/VPdfyW1oziI\/AAAAAAAAA_o\/F7O03d_kFCI\/s1600\/DriverObject.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EDriverStartIo appears not to be hooked.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EYou can see here that DriverStartIo isn't hooked because the address resolve to its proper symbol; however, this isn't actually the real driver object. Earlier i explained that IoStartPacket is always called with the device object of IdePort1, not the disk miniport: This means that when IoStartPacket called DriverStartIo internally, it does so by getting the driver object from the DriverObject field of IdePort1's device object, then getting the DriverStartIo field from that. Obviously this means that to hook DriverStartIo, one could simply just create a copy of atapi's driver object, with the DriverStartIo field modified, then set the DriverObject field of IdePort1's device object to point to the new, malicious driver object (this way on IdePort1 will point to the hooked driver, the rest will point to the original).\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EAs it happens TDL4 actually does the opposite, it hooks the real atapi driver object, then replaces the DriverObject field of the disk miniport's device object with the address of an identical driver object, without the DriverStartIo field modified.).\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EIf you know what you're looking for, fake driver objects are easy to detect. All devices created by a driver should point the same driver object, so simply enumerating the devices created by the miniport's driver then making sure all the DriverObject fields point to the same address is all that's needed. This can be done a multitude of ways.\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cb\u003EMethod 1: DrvObj\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EThe fake driver object will have the same name as the real one (in my case \"\\driver\\atapi\"), all you need to do is type \"!drvobj \\driver\\atapi 2\" to get the real driver's object (this is a downside of TDL4 hooking the real driver object instead of a spoofed one).\u0026nbsp;\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-b1tuHs4XXag\/VPdOQQQpL0I\/AAAAAAAAA_A\/gLJKb2vPDyg\/s1600\/DriverObjectReal.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-b1tuHs4XXag\/VPdOQQQpL0I\/AAAAAAAAA_A\/gLJKb2vPDyg\/s1600\/DriverObjectReal.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cb\u003EMethod 2: NextDevice\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EStarting with the miniport device, enumerate devices using \"dt _DEVICE_OBJECT \u0026lt;address\u0026gt;\" and the NextDevice field of each device's object. We're looking for any DriverObject field that dosen't match that of the miniport (this is the real driver object).\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-3jsvAjEKgvQ\/VPdjDVVMslI\/AAAAAAAAA_0\/ApLFlSh-7Vg\/s1600\/NextDevice.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-3jsvAjEKgvQ\/VPdjDVVMslI\/AAAAAAAAA_0\/ApLFlSh-7Vg\/s1600\/NextDevice.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EAll devices should point to the real driver object, except for the miniport.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cb\u003E\u003Cbr \/\u003EMethod 3: DeviceExtension\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EThis is the least reliable way, as the device extension could change from system to system, but as I mentioned earlier: you can find IdePort1's device extension at offset 0x5C isn't the miniport's device extension, then from IdePort1's device extension you can find its device object at offset 0x0C (IdePort1's device object will point to the real driver object). We can actually find the DeviceObject in a single commands using this overly complicated WinDbg-C++ syntax: \"dt _DEVICE_OBJECT poi(poi(@@C++(((nt!_DEVICE_OBJECT *)\u0026lt;address\u0026gt;)-\u0026gt;DeviceExtension)+0x5C)+0x0C)\", where \"\u0026lt;address\u0026gt;\" is the miniport device object.\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-Rgl2wuQPZxc\/VPdVvyB6beI\/AAAAAAAAA_Y\/8LlcAw2Nx7A\/s1600\/DeviceExtension.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-Rgl2wuQPZxc\/VPdVvyB6beI\/AAAAAAAAA_Y\/8LlcAw2Nx7A\/s1600\/DeviceExtension.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ch2 style=\"clear: both; text-align: left;\"\u003EPart3\u003C\/h2\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-3.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-3.html\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/7951996627479306953\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-2.html#comment-form","title":"10 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7951996627479306953"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7951996627479306953"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-2.html","title":"Bootkit Disk Forensics - Part 2"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-elDVj88Qutg\/VPYq4a4bOBI\/AAAAAAAAA9w\/yJafDuu8cm4\/s72-c\/AtaPortDispatch.png","height":"72","width":"72"},"thr$total":{"$t":"10"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-6462666901808552640"},"published":{"$t":"2015-02-25T19:42:00.000-08:00"},"updated":{"$t":"2015-03-04T12:13:12.422-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"bootkits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"forensics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"windows internals"}],"title":{"type":"text","$t":"Bootkit Disk Forensics - Part 1"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003ERecently I got the idea to play around with bypassing bootkit disk filters from an email i received, which highlighted that my MBR spoofing code was able to get underneath the driver of a popular forensics tool, preventing it from reading the real disk sectors. Although I believe disk forensics should not be done on a live system, instead the disk should be mounted on a clean system and examined from there, I thought it would be fun to write a tool for bypassing various bootkit drivers and then post my research. Another email I received requested that I show how one would detect the presence of such filters from WinDbg, So I will try to cover both.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EDisk Filtering - Old and New Driver Module\u003C\/h2\u003E\u003Cdiv\u003EAs I've shown in a \u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/01\/using-kernel-rootkits-to-conceal.html\"\u003Eprevious article\u003C\/a\u003E, disk filtering is usually done by hooking the IRP_MJ_SCSI field of the miniport driver's object. Another common method is hooking DriverStartIo; however, this field is only used in the old-style driver model and is set to NULL on most Vista+ systems. The drivers used depend on whether you use SCSI or ATA based hardware, but because all drivers follow the same model, I will simply use an ATA system in my examples.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EOld Driver Model\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EPre-Vista disk drivers would have a single ATA\u0026nbsp;channel driver known as atapi.sys, which would provide the functionality of both a port and\u0026nbsp;miniport. If a disk required a custom miniport, the vendor would have to write their own miniport\u0026nbsp;+ port driver, which is no small task.\u003Cbr \/\u003E\u003Cbr \/\u003EWhen a device receives a request such as IRP_MJ_SCSI, it queues it to the disk via IoStartPacket, which eventually calls the address held by the DriverStartIo field of the driver's object; thus hooking DriverStartIo would intercept any disk I\/O requests, not just IRP_MJ_SCSI.\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-7KShyZmMDXE\/VO5GkhQc3CI\/AAAAAAAAA7M\/rBJ3XJXqiBk\/s1600\/AtapiOld.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-7KShyZmMDXE\/VO5GkhQc3CI\/AAAAAAAAA7M\/rBJ3XJXqiBk\/s1600\/AtapiOld.png\" height=\"342\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003ENew Driver Model\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EThe new driver model provides a Microsoft supplied port driver (ataport.sys) and miniport driver (atapi.sys), which work together to make up the channel interface. The port driver provides basic functionality, whilst the miniport provides hardware specific functionality; so, if a vendor needs a custom miniport driver, they could simply write their own miniport to interface with the Microsoft supplied port driver.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EWith the new model the IRP_MJ_SCSI field of atapi's driver object points to a \u0026nbsp;function within ataport.sys (IdePortDispatch), which handles and queues requests using an internal mechanism instead of IoStartPacket, meaning bootkits hooking only IRP_MJ_SCSI and DriverStartIo can be bypassed using passthrough operations (even from usermode).\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-IVXrruf6I0E\/VO5LMzynqtI\/AAAAAAAAA7Y\/XRCGOGaHGtw\/s1600\/AtapiNew.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-IVXrruf6I0E\/VO5LMzynqtI\/AAAAAAAAA7Y\/XRCGOGaHGtw\/s1600\/AtapiNew.png\" height=\"540\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ETDL Warning\u003C\/h2\u003E\u003Cdiv\u003EAlthough TDL is no longer active, I should mention that it hijacks kdcom.dll (the COM debugger extension) in such a way that it prevents it from starting. If you attempt to enable kernel debugging via COM on a TDL infected system, it will be completely bricked following reboot (even safemode won't load).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EDetecting Major Function Hooks with WinDbg\u003C\/h2\u003E\u003Cdiv\u003EFirst things first you need to find which disk is your boot disk (it's up you you how you do this), but in most cases it will be \\Device\\Harddisk0\\DR0. Once you've made sure WinDbg has the correct symbols loaded, use !devstack to display the device stack and find the bottom most device (the miniport).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EHere is a normal output:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/--oJ-JSYIKHA\/VO5PLvnLvmI\/AAAAAAAAA7k\/iYAaZ99v8F8\/s1600\/DeviceStackClean.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/--oJ-JSYIKHA\/VO5PLvnLvmI\/AAAAAAAAA7k\/iYAaZ99v8F8\/s1600\/DeviceStackClean.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn the case of some TDL4 infections, the miniport driver object (\\driver\\atapi) will appear to be invalid (it's not), but it prevents the !devobj and !drvobj commands from working, so we'll have to get the driver object associated with the miniport by using dt _DEVICE_OBJECT on the lowest device's object.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-ef2rvbrdRxM\/VO5SZRWibDI\/AAAAAAAAA8A\/RQrlvHoyTN0\/s1600\/DeviceObject.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-ef2rvbrdRxM\/VO5SZRWibDI\/AAAAAAAAA8A\/RQrlvHoyTN0\/s1600\/DeviceObject.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ENow we can examine the driver object (specifically the dispatch table) for major function pointer hooks. On a clean system all the dispatch routines should have addresses which resolve to symbols in either the miniport, port or ntoskrnl. On TDL4 infected systems the !drvobj command won't work, so you'll have to use dds (iv'e shown how to use both below).\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-tqcFGTpeTtE\/VO5WE1Ez57I\/AAAAAAAAA8M\/3d4xlRv1fdw\/s1600\/DriverObject.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-tqcFGTpeTtE\/VO5WE1Ez57I\/AAAAAAAAA8M\/3d4xlRv1fdw\/s1600\/DriverObject.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EMajor functions on a clean system shown with !drvobj\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-9SOzCD7abpg\/VO5b9V_Cu_I\/AAAAAAAAA8k\/ibevsa7x9zw\/s1600\/DriverDispatch.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-9SOzCD7abpg\/VO5b9V_Cu_I\/AAAAAAAAA8k\/ibevsa7x9zw\/s1600\/DriverDispatch.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EMajor functions on a clean system shown with dds\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EOn an infected system (TDL4) we will see something similar to the below.\u003Cbr \/\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-chTR3A5_ZTk\/VO5hU5VeHnI\/AAAAAAAAA80\/ro7V4cLa96Q\/s1600\/DriverDispatchInfectedTDL4.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-chTR3A5_ZTk\/VO5hU5VeHnI\/AAAAAAAAA80\/ro7V4cLa96Q\/s1600\/DriverDispatchInfectedTDL4.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ENote: all the dispatch routines point to the same address, which\u0026nbsp;resides in pool memory (not normal).\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-hlYY-JH4Khs\/VO5nnRHksSI\/AAAAAAAAA9M\/jG1FUqm0REo\/s1600\/DriverDispatchInfectedRovnixD.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-hlYY-JH4Khs\/VO5nnRHksSI\/AAAAAAAAA9M\/jG1FUqm0REo\/s1600\/DriverDispatchInfectedRovnixD.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EIn an attempt to trick av tools, Rovnix redirects the pointers to jumps it wrote to unused space at the end of atapi.sys, hence the addresses don't resolve to a function, only a module.\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EIf the driver dispatch table appears to be clean, the next thing to do is disassemble the address pointed to by IRP_MJ_SCSI (IRP_MJ_INTERNAL_DEVICE_CONTROL), as this is the dispatch routine which handles disk read\/write requests and could be inline hooked. In my case IRP_MJ_SCSI points to ataport!IdePortDispatch.\u003Cbr \/\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-JEfTSQ_OY_w\/VO5jeC2qdTI\/AAAAAAAAA9A\/HvsPxwTS5sk\/s1600\/CleanIdePortDispatch.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-JEfTSQ_OY_w\/VO5jeC2qdTI\/AAAAAAAAA9A\/HvsPxwTS5sk\/s1600\/CleanIdePortDispatch.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EA example of a clean IRP_MJ_SCSI handler\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EIt may be difficult to detect inline hooks, especially if existing jump\/calls are modified. One should compare the module in memory against its disk image, accounting for relocation and imports (the best way to do this would be to have a driver map the disk image into memory and relocate it to point to the original module, allowing you to simply compare the two).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EPart 2\u003C\/h2\u003E\u003Cdiv\u003E\u003Ca href=\"http:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-2.html\"\u003Ehttp:\/\/www.malwaretech.com\/2015\/03\/bootkit-disk-forensics-part-2.html\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/6462666901808552640\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/02\/bootkit-disk-forensics-part-1.html#comment-form","title":"9 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6462666901808552640"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6462666901808552640"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/02\/bootkit-disk-forensics-part-1.html","title":"Bootkit Disk Forensics - Part 1"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-7KShyZmMDXE\/VO5GkhQc3CI\/AAAAAAAAA7M\/rBJ3XJXqiBk\/s72-c\/AtapiOld.png","height":"72","width":"72"},"thr$total":{"$t":"9"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-655639521563246111"},"published":{"$t":"2015-02-11T19:44:00.000-08:00"},"updated":{"$t":"2015-06-05T09:56:08.189-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"exploits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"news"}],"title":{"type":"text","$t":"RIG Exploit Kit - Source Code Leak"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cbr \/\u003EAs the past has show us, cybercriminals are not the most trustworthy people when it come to holding valuable sources, and it looks like we're about to get another reminder of that, this time with an exploit pack leak.\u003Cbr \/\u003E\u003Cbr \/\u003ERIG is a popular exploit kit which has been around for about a year and sold on various \"underground\" forums. On February 3rd 2015 a user claiming to be the \"Official HF Sales Rep\" posted a sales thread on hackforums (HF), which is unusual as most serious sellers avoid this forum completely. It's likely the decision to allow resellers on this specific board was due to a large amount of users trying to rent out access to their RIG accounts, resulting in lost income for the seller.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-dC1Lwjc6UCw\/VNwOZ_j9S5I\/AAAAAAAAA5c\/04in_6PriKE\/s1600\/hfthread.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"446\" src=\"http:\/\/1.bp.blogspot.com\/-dC1Lwjc6UCw\/VNwOZ_j9S5I\/AAAAAAAAA5c\/04in_6PriKE\/s1600\/hfthread.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EHackforums RIG sales thread\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EAlthough the HF reseller first claimed to be a verified seller, the claims soon escalated into being \"more than just a seller\", and before long he was registering on private forums claiming to be one of the developers.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-7jKAAm-X6wE\/VNwSOhbvZ0I\/AAAAAAAAA5o\/vG4Pmk40zRU\/s1600\/post1.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"95\" src=\"http:\/\/2.bp.blogspot.com\/-7jKAAm-X6wE\/VNwSOhbvZ0I\/AAAAAAAAA5o\/vG4Pmk40zRU\/s1600\/post1.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ESellers with benefits\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-3-nIClgibkM\/VNwTZZ7ZnBI\/AAAAAAAAA50\/exHXWrv3wIE\/s1600\/privintro.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"248\" src=\"http:\/\/3.bp.blogspot.com\/-3-nIClgibkM\/VNwTZZ7ZnBI\/AAAAAAAAA50\/exHXWrv3wIE\/s1600\/privintro.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EPrivate forum introduction\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EHis introduction into the private forum didn't go too well: First members pointed out that his RIG prices were nearly 40% higher than the official sellers (typical of a re-seller not a developer), then they made fun of him when someone posted screenshots of his website, which was requesting a $3000 payment to gain access to his never-heard-of private forum. Eventually the entire thread turned into people making fun of him, before the administrator banned his account.\u003Cbr \/\u003E\u003Cbr \/\u003EIt seems like the RIG owner was less than pleased with the reseller's antics because the next day, in a conversation with another member, the owner declared that he had suspended the reseller for attempting to scam customers, which isn't surprising given he was requesting that people pay him $3000 for access to an imaginary private forum.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-8TQCFx96PTE\/VNwYrWAYj0I\/AAAAAAAAA6E\/9EMSPPlkTAs\/s1600\/jabber.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-8TQCFx96PTE\/VNwYrWAYj0I\/AAAAAAAAA6E\/9EMSPPlkTAs\/s1600\/jabber.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EConversation between a HF member and RIG owner\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EShortly after, the reseller does what any cybercriminal does when his enterprise begins crumbling around him: He signs up for twitter and becomes a security researcher???\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-h0pNmDdopmw\/VNwaGg7GlgI\/AAAAAAAAA6Q\/1cOK2z6ObmA\/s1600\/allofmywat.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"186\" src=\"http:\/\/2.bp.blogspot.com\/-h0pNmDdopmw\/VNwaGg7GlgI\/AAAAAAAAA6Q\/1cOK2z6ObmA\/s1600\/allofmywat.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EI don't even....\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EThe twitter account, which is a pun on MalwareMustDie, claims to be in possession of the RIG source code as well as a recent database dump, and is currently tweeting a download link at various security researchers (not me though, apparently I'm not good enough). The file, which is password protected, was deleted from the filehost after less than 24 downloads, so I am not able to confirm if this is legit or just another scriptkiddie tantrum.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-sSdnLgMGkY0\/VNweIjBdjmI\/AAAAAAAAA6c\/gG8-6ipyXGg\/s1600\/files.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"482\" src=\"http:\/\/4.bp.blogspot.com\/-sSdnLgMGkY0\/VNweIjBdjmI\/AAAAAAAAA6c\/gG8-6ipyXGg\/s1600\/files.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EA screenshot allegedly showing panel files and sql database dump\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-Q6-3dzp4DPI\/VNwf8Zix2qI\/AAAAAAAAA6o\/0x9Ik8hkbiE\/s1600\/jabber1.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-Q6-3dzp4DPI\/VNwf8Zix2qI\/AAAAAAAAA6o\/0x9Ik8hkbiE\/s1600\/jabber1.png\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ERIG owner confirms he may have database and older version of exploit kit.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EI'll post updates when I have more info.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EUpdated 02\/12\/2015 09:00 (UTC)\u003C\/h2\u003E\u003Cdiv\u003EI've confirmed with 3 people that the leak is in fact legitimate, and a fairly recent version of the pack.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/twitter.com\/kafeine\"\u003E@kafeine\u003C\/a\u003E\u0026nbsp;has mentioned that he thinks someone with access to the RIG panel may be stealing traffic. He reports that occasionally the exploit payload appears to be replaced with another (usually cryptowall); which coincides with a lot of claims made by customers who bought RIG through the reseller.\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-eBJJVuCiStY\/VNxqIm6gt0I\/AAAAAAAAA64\/ez2kYD8a40Y\/s1600\/payloads.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"234\" src=\"http:\/\/1.bp.blogspot.com\/-eBJJVuCiStY\/VNxqIm6gt0I\/AAAAAAAAA64\/ez2kYD8a40Y\/s1600\/payloads.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003Ea RIG thread pushing 2 different payloads\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EDue to the way in which the RIG exploit pack works (the exploiting is done by a back-end server, so no exploits are contained within the leak), I have decided to upload it \u003Ca href=\"https:\/\/mega.co.nz\/#!fNpj3Qbb!UFn2ChNMMLvSZvEAQz3NJSDPYGVVngd3KhHhwXp7wKY\"\u003Ehere\u003C\/a\u003E (thanks to\u0026nbsp;\u003Ca href=\"https:\/\/twitter.com\/kafeine\"\u003E@kafeine\u003C\/a\u003E\u0026nbsp;for files and information).\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/655639521563246111\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/02\/rig-exploit-kit-possible-source-code.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/655639521563246111"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/655639521563246111"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/02\/rig-exploit-kit-possible-source-code.html","title":"RIG Exploit Kit - Source Code Leak"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-dC1Lwjc6UCw\/VNwOZ_j9S5I\/AAAAAAAAA5c\/04in_6PriKE\/s72-c\/hfthread.png","height":"72","width":"72"},"thr$total":{"$t":"4"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-6311957696909719514"},"published":{"$t":"2015-01-19T00:14:00.001-08:00"},"updated":{"$t":"2015-01-19T00:14:48.219-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"bootkits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"windows internals"}],"title":{"type":"text","$t":"Using Kernel Rootkits to Conceal Infected MBR"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003EIf you've look at any of the major bootkits such as TDL4 and Rovnix, you've probably noticed they employ certain self defense features to prevent removal; specifically, intercepting read\/write requests to the boot sectors. While these defense mechanisms can fool some software, they may, in some cases, make infections even easier to spot.\u003Cbr \/\u003E\u003Cbr \/\u003ERovnix is probably the less stealthy of the two: It intercepts read\/write requests to the boot disk by hooking the miniport driver, on read attempts it fills the buffer with zeros, resulting in the boot sectors appearing completely empty, on write requests it simply returns ACCESS_DENIED. Although this does prevent reading \u0026amp; writing \u0026nbsp;the sectors, it's usually a sure sign of an infection when the boot sector is blank but your system boots, or you can't write the boot sector even with SYSTEM privileges.\u003Cbr \/\u003E\u003Cbr \/\u003EOn the other had we have TDL4, which goes a step further: Instead of filling the buffer with zeros during read attempts, it instead replaces the read data with the original, non-infected master boot record (MBR). As a result of TDL4's clever trickery, any tools attempting to read the MBR will just see the original windows MBR and assume nothing is wrong; however, TDL4 also opted for a similar method to Rovnix by just denies writes to the boot sector, but with the slightly more inconspicuous error: STATUS_INVALID_DEVICE_REQUEST.\u003Cbr \/\u003E\u003Cbr \/\u003EObviously straight up denying write requests to the boot sector is going to raise some questions, so what if we improved upon TDL4's method and also allowed writing to the spoofed, non-infected MBR, instead of the real one on disk.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EIntercepting Disk I\/O\u003C\/h2\u003E\u003Cdiv\u003EThere's a lot of places in the kernel that disk I\/O can be intercepted to trick user mode tools; however, any software using kernel drivers can bypass high level hooks. The first though would probably be to hook Disk.sys (the driver responsible for handling disk operations), but although this would work against some tools, there are trick to avoid it, I'll explain how.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EDisk.sys handles disk I\/O, it doesn't actually send any requests to the hard drive, it simply acts as a middleman translating kernel disk I\/O requests into SCSI requests (the protocol used to communicate with the hard drive). Once Disk.sys has translated a request, it dispatches it to another, lower level driver (known as a Miniport driver), in the form of an SCSI_REQUEST_BLOCK, which the Miniport sends to the hardware via the Port driver.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe Miniport is generally operating system independent, whilst the port driver is specific to certain OS version and even hardware, making the Miniport the best place to hook without getting into hardware dependent territory. Finding a Miniport driver is pretty straight forward as all drivers\/devices are stacked, so we simply walk down the device stack until we reach the bottom most device (The Miniport).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-kWEu1KbPBNU\/VLx9GXQMUMI\/AAAAAAAAA4Q\/HYwQtgOtLhY\/s1600\/DiskStack.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-kWEu1KbPBNU\/VLx9GXQMUMI\/AAAAAAAAA4Q\/HYwQtgOtLhY\/s1600\/DiskStack.png\" height=\"300\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E2 \u0026nbsp;identical device stacks for different disks\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EThe device \"\\Device\\HardDisk0\\DR0\" is almost always the boot disk and is the NT device name for \"\\\\.\\PhysicalDrive0\". The device directly below the disk device is the Miniport and usually belongs to atapi.sys, scsiport.sys, iastor.sys (or in the case of vmware,\u0026nbsp;lsi_sas.sys), this is the driver we want to hook. We can get the device object of the Miniport by opening \"\\Device\\HardDisk0\\DR0\" then calling \"IoGetLowerDeviceObject\" with it, all we then need to do is replace the IRP_MJ_SCSI pointer in the driver's object with a pointer to our filter routine, which will intercept all I\/O for that disk device.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EFiltering Miniport Requests\u003C\/h2\u003E\u003Cdiv\u003E\u003Cb\u003EKey\u003C\/b\u003EIoStack = IO_STACK_LOCATION\u003Cbr \/\u003ESrb = SCSI_REQUEST_BLOCK\u003C\/div\u003E\u003Cdiv\u003ECdb = CDB (SCSI Command Block)\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAll the information we need is in the SCSI_REQUEST_BLOCK pointed to by IoStack-\u0026gt;Parameters.Scsi.Srb, we only need to filter WRITE(10) and READ(10) SCSI operations on disks 2 TB or smaller (\"Srb.CdbLength == 10\"). Next we simply check the opcode in the Cdb for\u0026nbsp;SCSIOP_READ or\u0026nbsp;SCSIOP_READ_DATA_BUFF for read operations and similarly\u0026nbsp;SCSIOP_WRITE or\u0026nbsp;SCSIOP_WRITE_DATA_BUFF for write operations.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003ENow we need to see if the request is attempting to read or write sectors that overlap the MBR, which is located at logical block address (LBA) 0, by checking the LogicalBlock and TransferLength field in the Cdb, (these values are \u0026nbsp;big-endian so will need to be converted to little-endian before checking them). \u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe driver will store the clean MBR into a buffer allocated at runtime, all read\/write requests will be done to\/from the clean MBR buffer, instead of the actual MBR on disk.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EProcessing Intercepted Read Requests\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003ESet up a completion routine to be called after the hard disk has processed the read request.\u003C\/li\u003E\u003Cli\u003EWhen the completion routine is called, map the caller's buffer (Irp-\u0026gt;MdlAddress) into system memory and replace the infected mbr with the clean one in it.\u003C\/li\u003E\u003Cli\u003EAllow the request to complete.\u003C\/li\u003E\u003C\/ol\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EProcessing Intercepted Write Requests\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EWrite requests are a little different: If the caller is only trying to write 1 sector (just the MBR), we can process the request ourselves; however, if the caller is trying to write multiple sectors (including the MBR), things get a bit more tricky. \u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003EMap the caller's buffer (Srb-\u0026gt;DataBuffer) into system memory and read the first 512 bytes (1 sector) into the clean MBR buffer.\u003C\/li\u003E\u003Cli\u003EIncrement the caller's buffer (Srb-\u0026gt;DataBuffer)\u0026nbsp;by 512 bytes.\u003C\/li\u003E\u003Cli\u003EDecrement the transfer length (Srb-\u0026gt;DataTransferLength) by 512 bytes.\u003C\/li\u003E\u003Cli\u003EAdd 1 to the Logical Block Address (Stored in Cdb).\u003C\/li\u003E\u003Cli\u003ESubtract 1 from the Number of blocks to transfer (Stored in Cdb).\u003C\/li\u003E\u003Cli\u003EPass the request to the real Miniport (this will write all the sectors the caller wanted, except the MBR).\u003C\/li\u003E\u003Cli\u003EReplace the original\u0026nbsp;Srb-\u0026gt;DataBuffer (Just to be safe).\u003C\/li\u003E\u003Cli\u003EIf the call succeeded, add 512 to Srb-\u0026gt;DataTransferLength (This is the number of bytes actually written to disk, because we skipped them MBR we need to make it seem like we didn't).\u003C\/li\u003E\u003Cli\u003EAllow the request to complete.\u003C\/li\u003E\u003C\/ol\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EProof of Concept\u003C\/h2\u003E\u003Cdiv\u003EI've written a proof of concept driver that will make the MBR appear to contain the following text:\u003C\/div\u003E\u003Cblockquote class=\"tr_bq\"\u003EIs this the real code?\u003Cbr \/\u003EIs this just spoofed for me?\u003Cbr \/\u003Ebots trying to hide.\u003Cbr \/\u003ENot sure of the legality.\u003C\/blockquote\u003EThe system will be able to read\/write to this fake MBR without modifying the real one, when the driver is unloaded or the system rebooted, the original MBR will still be intact and the face one will be gone. For some reason the driver will crash the system if loaded then unloaded many times in a row without reboot, but it's not a huge issue and I'm too lazy to debug.\u003Cbr \/\u003E\u003Cbr \/\u003EGitHub of code: \u0026nbsp;\u003Ca href=\"https:\/\/github.com\/MalwareTech\/FakeMBR\/\"\u003Ehttps:\/\/github.com\/MalwareTech\/FakeMBR\/\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-YVs5-6ziY5s\/VLyfP3JF0TI\/AAAAAAAAA4g\/6bAdJ8-zUIU\/s1600\/MBRFun.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-YVs5-6ziY5s\/VLyfP3JF0TI\/AAAAAAAAA4g\/6bAdJ8-zUIU\/s1600\/MBRFun.png\" height=\"368\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/6311957696909719514\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/using-kernel-rootkits-to-conceal.html#comment-form","title":"6 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6311957696909719514"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/6311957696909719514"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/using-kernel-rootkits-to-conceal.html","title":"Using Kernel Rootkits to Conceal Infected MBR"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-kWEu1KbPBNU\/VLx9GXQMUMI\/AAAAAAAAA4Q\/HYwQtgOtLhY\/s72-c\/DiskStack.png","height":"72","width":"72"},"thr$total":{"$t":"6"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-7364399196262512260"},"published":{"$t":"2015-01-08T04:08:00.000-08:00"},"updated":{"$t":"2015-02-03T05:24:41.503-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"tutorials"}],"title":{"type":"text","$t":"Inline Hooking for Programmers (Part 2: Writing a Hooking Engine)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EWe'll be writing a hooking engine using trampoline based hooks as explained in the previous article (we don't handle relative instructions as they're very rare, but we do use atomic write operations to prevent race conditions).\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EFirst things first, we need to define the proxy functions which we will redirect the hooked functions to, these must have the same calling convention, return type, and parameters as the functions we are going to hook with them. For this example we will simply have them print out the parameters before displaying the message box.\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003Eint WINAPI NewMessageBoxA(HWND hWnd, LPCSTR lpText, LPCTSTR lpCaption, UINT uType)\u003Cbr \/\u003E{\u003Cbr \/\u003E printf(\"MessageBoxA called!\\ntitle: %s\\ntext: %s\\n\\n\", lpCaption, lpText);\u003Cbr \/\u003E return OldMessageBoxA(hWnd, lpText, lpCaption, uType);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Eint WINAPI NewMessageBoxW(HWND hWnd, LPWSTR lpText, LPCTSTR lpCaption, UINT uType)\u003Cbr \/\u003E{\u003Cbr \/\u003E printf(\"MessageBoxW called!\\ntitle: %ws\\ntext: %ws\\n\\n\", lpCaption, lpText);\u003Cbr \/\u003E return OldMessageBoxW(hWnd, lpText, lpCaption, uType);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003EOldMessageBox is simply a typedef that will point to 25 bytes of executable memory which the hooking function will store the trampoline into.\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003Etypedef int (WINAPI *TdefOldMessageBoxA)(HWND hWnd, LPCSTR lpText, LPCTSTR lpCaption, UINT uType);\u003Cbr \/\u003Etypedef int (WINAPI *TdefOldMessageBoxW)(HWND hWnd, LPWSTR lpText, LPCTSTR lpCaption, UINT uType);\u003Cbr \/\u003ETdefOldMessageBoxA OldMessageBoxA = (TdefOldMessageBoxA)VirtualAlloc(NULL, 25, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\u003Cbr \/\u003ETdefOldMessageBoxW OldMessageBoxW =\u0026nbsp;(TdefOldMessageBoxW)VirtualAlloc(NULL, 25, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\u003C\/pre\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003ENow for the hooking function, we will have the following parameters:\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Ename - The name of the function to hook.\u003C\/li\u003E\u003Cli\u003Edll - The dll the target function resides in.\u003C\/li\u003E\u003Cli\u003Eproxy - a pointer to the proxy function (NewMessageBox).\u003C\/li\u003E\u003Cli\u003Eoriginal - A pointer to 25 bytes of executable memory, where we will store the trampoline.\u003C\/li\u003E\u003Cli\u003Elength - A pointer to a variable which receives the number of bytes worth of instructions stored in the trampoline (remember we can only copy whole instructions).\u0026nbsp;\u003C\/li\u003E\u003C\/ul\u003E\u003Cpre class=\"prettyprint lang-c\"\u003EBOOL HookFunction(CHAR *dll, CHAR *name, LPVOID proxy, LPVOID original, PDWORD length)\u003Cbr \/\u003E{\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EInside the hooking function we will get the address of the target function, then use the \"Hacker Dissasembler Engine (HDE32)\" to dissasemble each instruction and get the length, until we have 5 or more bytes worth of whole instructions (hde32_disasm returns the length of the instruction pointed to by the first parameter).\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003ELPVOID FunctionAddress;\u003Cbr \/\u003EDWORD TrampolineLength = 0;\u003Cbr \/\u003E\u003Cbr \/\u003EFunctionAddress = GetProcAddress(GetModuleHandleA(dll), name);\u003Cbr \/\u003Eif(!FunctionAddress)\u003Cbr \/\u003E return FALSE;\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/disassemble length of each instruction, until we have 5 or more bytes worth\u003Cbr \/\u003Ewhile(TrampolineLength \u0026lt; 5)\u003Cbr \/\u003E{\u003Cbr \/\u003E LPVOID InstPointer = (LPVOID)((DWORD)FunctionAddress + TrampolineLength);\u003Cbr \/\u003E TrampolineLength += hde32_disasm(InstPointer, \u0026amp;disam);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003ETo build the actual trampoline we first copy \"TrampolineLength\" of bytes from the target function to the trampoline buffer (passed to the function in the parameter \"original\"), then we append the copied bytes with a jump to \u003Ci\u003En\u003C\/i\u003E bytes into target function (n is TrampolineLength e.g. resume execution in the target function where the trampoline left off).\u003Cbr \/\u003E\u003Cbr \/\u003EA relative jump is the distance from the end of the jump, that is: (destination - (source\u0026nbsp;+ 5)). The source of the jump will be the trampoline address + TrampolineLength and the destination will be the hooked function + TrampolineLength.\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003EDWORD src = ((DWORD)FunctionAddress + TrampolineLength);\u003Cbr \/\u003EDWORD dst = ((DWORD)original + TrampolineLength + 5);\u003Cbr \/\u003EBYTE jump[5] = {0xE9, 0x00, 0x00, 0x00, 0x00};\u003C\/pre\u003E\u003Cpre class=\"prettyprint lang-c\"\u003E\/\/Store n bytes from the target function into trampoline\u003Cbr \/\u003Ememcpy(original, FunctionAddress, TrampolineLength);\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Set the second byte of the jump (the offset), so the jump goes where we want.\u003Cbr \/\u003E*(DWORD *)(jump+1) = src - dst;\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Copy the jump to the end of the trampoline\u003Cbr \/\u003Ememcpy((LPVOID)((DWORD)original+TrampolineLength), jump, 5);\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EBefore we can write the jump to the function, we need to make sure the memory is writable (it's usually not), we do this by setting the protection to PAGE_EXECUTE_READWRITE using VirtualProtect.\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003E\/\/Make sure the function is writable\u003Cbr \/\u003EDWORD OriginalProtection;\u003Cbr \/\u003Eif(!VirtualProtect(FunctionAddress, 8, PAGE_EXECUTE_READWRITE, \u0026amp;OriginalProtection))\u003Cbr \/\u003E return FALSE;\u003C\/pre\u003E\u003Cbr \/\u003ETo place the hook all we need to do is create a jump to jump from the target function to the proxy, then we can overwrite the first 5 bytes of the target with it. To avoid any risk of the function being called while we're writing the jump, we must write all of it at once (atomically). Sadly atomic functions can only work with sizes of base 2 (2, 4, 8, 16, etc); our jump is 5 bytes and the closest size we can copy is 8, so we will have to make a custom function (SafeMemcpyPadded) that will pad the source buffer to 8 bytes with bytes from the destination, so that the last 3 bytes remain unchanged after the copy.\u003Cbr \/\u003E\u003Cbr \/\u003Ecmpxchg8b compares the 8 bytes held in edx:eax, with the destination, if they're equal it copies the 8 bytes held in ecx:ebx, we set edx:eax to the destination bytes so that the copy always happens.\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003E\/\/Build and atomically write the hook\u003Cbr \/\u003E*(DWORD *)(jump+1) = (DWORD)proxy - (DWORD)FunctionAddress - 5;\u003Cbr \/\u003ESafeMemcpyPadded(FunctionAddress, Jump, 5);\u003C\/pre\u003E\u003Cpre class=\"prettyprint lang-c\"\u003Evoid SafeMemcpyPadded(LPVOID destination, LPVOID source, DWORD size)\u003Cbr \/\u003E{\u003Cbr \/\u003E BYTE SourceBuffer[8];\u003Cbr \/\u003E\u003Cbr \/\u003E if(size \u0026gt; 8)\u003Cbr \/\u003E  return;\u003Cbr \/\u003E\u003Cbr \/\u003E \/\/Pad the source buffer with bytes from destination\u003Cbr \/\u003E memcpy(SourceBuffer, destination, 8);\u003Cbr \/\u003E memcpy(SourceBuffer, source, size);\u003Cbr \/\u003E\u003Cbr \/\u003E __asm \u003Cbr \/\u003E {\u003Cbr \/\u003E  lea esi, SourceBuffer;\u003Cbr \/\u003E  mov edi, destination;\u003Cbr \/\u003E\u003Cbr \/\u003E  mov eax, [edi];\u003Cbr \/\u003E  mov edx, [edi+4];\u003Cbr \/\u003E  mov ebx, [esi];\u003Cbr \/\u003E  mov ecx, [esi+4];\u003Cbr \/\u003E\u003Cbr \/\u003E  lock cmpxchg8b[edi];\u003Cbr \/\u003E }\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EAll that's left to do now is restore the page protection. flush the instruction cache, and set the \"length\" parameter to TrampolineLength.\u003Cbr \/\u003E\u003Cpre class=\"prettyprint lang-c\"\u003E\/\/Restore the original page protection\u003Cbr \/\u003EVirtualProtect(FunctionAddress, 8, OriginalProtection, \u0026amp;OriginalProtection);\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Clear CPU instruction cache\u003Cbr \/\u003EFlushInstructionCache(GetCurrentProcess(), FunctionAddress, TrampolineLength);\u003Cbr \/\u003E\u003Cbr \/\u003E*length = TrampolineLength;\u003Cbr \/\u003Ereturn TRUE;\u003C\/pre\u003E\u003Cbr \/\u003EThe hooking function can simply be called like so.\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"prettyprint lang-c\"\u003EDWORD length;\u003Cbr \/\u003EHookFunction(\"user32.dll\", \"MessageBoxA\", \u0026amp;NewMessageBoxA, OldMessageBoxA, \u0026amp;length);\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EUnhooking is done by copying \"length\" bytes to the hooked function from OldMessageBox (the trampoline).\u003Cbr \/\u003E\u003Cbr \/\u003EYou can see my full hooking engine, including example usage, on \u003Ca href=\"https:\/\/github.com\/MalwareTech\/BasicHook\/\"\u003EGitHub\u003C\/a\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-n4Yo3Z21T6g\/VK6U1OTerfI\/AAAAAAAAA4A\/n4fCWcbm5jk\/s1600\/thumb.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-n4Yo3Z21T6g\/VK6U1OTerfI\/AAAAAAAAA4A\/n4fCWcbm5jk\/s1600\/thumb.png\" height=\"0\" width=\"0\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/7364399196262512260\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/inline-hooking-for-programmers-part-2.html#comment-form","title":"15 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7364399196262512260"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7364399196262512260"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/inline-hooking-for-programmers-part-2.html","title":"Inline Hooking for Programmers (Part 2: Writing a Hooking Engine)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-n4Yo3Z21T6g\/VK6U1OTerfI\/AAAAAAAAA4A\/n4fCWcbm5jk\/s72-c\/thumb.png","height":"72","width":"72"},"thr$total":{"$t":"15"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-1786110012972456742"},"published":{"$t":"2015-01-08T04:07:00.001-08:00"},"updated":{"$t":"2015-01-08T04:07:40.174-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"tutorials"}],"title":{"type":"text","$t":"Inline Hooking for Programmers (Part 1: Introduction)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EA lot of my articles have been aimed at giving a high-level insight into malware for beginners, or those unfamiliar with specific concepts. Today I've decided to start a new series designed to familiarize people with malware internals on a programming level. This will not be a tutorial aimed towards people creating sophisticated malware, but security enthusiasts looking to better understand it.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EInline Hooking\u003C\/h2\u003E\u003Cdiv\u003E\u003Cb\u003EWhat is it\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EInline hooking is a method of intercepting calls to target functions,which is mainly used by antiviruses, sandboxes, and malware. The general idea is to redirect a function to our own, so that we can perform processing before and\/or after the function does its; this could include: checking parameters, shimming, logging, spoofing returned data, and filtering calls. Rootkits tend to use hooks to modify data returned from system calls in order to hide their presence, whilst security software uses them to prevent\/monitor potentially malicious operations.\u003Cbr \/\u003E\u003Cbr \/\u003EThe hooks are placed by directly modifying code within the target function (inline modification), usually by overwriting the first few bytes with a jump; this allows execution to be redirected before the function does any processing. Most hooking engines use a 32-bit relative jump (opcode 0xE9), which takes up 5 bytes of space.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EProblems we face\u003C\/b\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EMight need to call the original function which we've overwritten with a jump.\u003C\/li\u003E\u003Cli\u003ERace conditions.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003ECalling convention mismatches.\u003C\/li\u003E\u003Cli\u003EInfinite recursion.\u0026nbsp;\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EHow it works\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EWe will be using a trampoline based hook, which allows us to intercept functions, whilst still being able to call \u0026nbsp;the originals (without unhooking them first).\u003Cbr \/\u003E\u003Cbr \/\u003Ethis hook is made up of 3 parts:\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003EThe Hook - A 5 byte relative jump which is written to the target function in order to hook it, the jump will jump from the hooked function to our code.\u003C\/li\u003E\u003Cli\u003EThe Proxy - This is our specified function (or code) which the hook placed on the target function will jump to.\u003C\/li\u003E\u003Cli\u003EThe Trampoline - Used to bypass the hook so we can call a hooked function normally.\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EWhy Trampoline\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003ELet's say we want to hook MessageBoxA, print out the parameters from within the proxy function, then display the message box: In order to display the message box, we need to call MessageBoxA (which redirects to our proxy function, which in turn calls MessageBoxA). Obviously calling MessageBoxA from within our proxy function will just cause infinite recursion and the program with eventually crash due to a stack overflow.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EWe could simply unhook MessageBoxA from within the proxy function, call it, then re hooking it; but if multiple threads are calling MessageBoxA at the same time, this would cause a race condition and possibly crash the program.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EInstead, what we can do is store the first 5 bytes of MessageBoxA (these are overwritten by our hook), then when we need to call the non hooked MessageBoxA, we can execute the stored first 5 bytes, followed by a jump 5 bytes into MessageBoxA (directly after the hook). If you're having trouble visualizing that, I've made a call graph.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-JJHTS2a2R9k\/VK5xKePaEJI\/AAAAAAAAA3w\/DJc88sCmK8s\/s1600\/CodeFlow.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"Using a trampoline to call a hooked function\" border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-JJHTS2a2R9k\/VK5xKePaEJI\/AAAAAAAAA3w\/DJc88sCmK8s\/s1600\/CodeFlow.png\" height=\"570\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ETop is a normal call to non-hooked MessageBoxA, bottom is a call using our trampoline to bypass the hook.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAs long as the first 5 bytes aren't relative instructions, they can be executed anywhere (because it's very rare for functions to use relative instructions so early on, so we don't really need to handle this). A problem we do need to handle is if the first 5 bytes of the function don't make up \u003Ci\u003En\u003C\/i\u003E whole instructions).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn the example, the first 5 bytes of the function make up exactly 3 instructions (mov edi, edi; push ebp; mov ebp, esp), however, if for example, the first instruction was 10 bytes long and we only stored 5 bytes: the trampoline would be trying to execute half an instruction and the program would explode. To get around this, we must use a disassemble to get the length of each instruction, so we can make sure only to copy whole instructions. The best case scenario is the first \u003Ci\u003En\u003C\/i\u003E instructions add up to exactly 5 bytes, the worst case is if the first instruction is 4 bytes and the second is 16 (the maximum length of an x86 instruction), we must store 20 bytes (4 + 16), meaning our trampoline must be 25 bytes in size (space for up to 20 bytes worth of instructions and a 5 byte jump back to the hooked function). It's important to note that the return jump must jump to the hooked function \u003Ci\u003En\u003C\/i\u003E bytes in, where \u003Ci\u003En\u003C\/i\u003E is however many instructions we stored in the trampoline.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/1786110012972456742\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/inline-hooking-for-programmers-part-1.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/1786110012972456742"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/1786110012972456742"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/inline-hooking-for-programmers-part-1.html","title":"Inline Hooking for Programmers (Part 1: Introduction)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-JJHTS2a2R9k\/VK5xKePaEJI\/AAAAAAAAA3w\/DJc88sCmK8s\/s72-c\/CodeFlow.png","height":"72","width":"72"},"thr$total":{"$t":"4"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-5412806172924801010"},"published":{"$t":"2015-01-01T23:06:00.003-08:00"},"updated":{"$t":"2015-01-02T12:47:16.667-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"botnets"},{"scheme":"http://www.blogger.com/atom/ns#","term":"DDoS"},{"scheme":"http://www.blogger.com/atom/ns#","term":"security"}],"title":{"type":"text","$t":"Distributed Denial Of Service (DDoS) for Beginners"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EDistributed Denial Of Service, or DDoS, is an attack in which multiple devices send data to a target device (usually a server), with the hope of rendering the network connection or a system application unusable. There are many forms of DDoS attack, but almost all modern attacks are either at Layer 4 (The Transport Layer) or Layer 7 (The Application Layer), I'll cover both of these in depth. Although DDoS attacks can occur between almost any devices, I'll refer to the attacker as the client and the victim as the server.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003ELayer 4 (Transport Layer)\u003C\/h2\u003E\u003Cdiv\u003ETCP, USD, SCTP, DCCP and RSVP are all examples of Layer 4 protocols; however, we'll focus on UDP as this is most commonly utilized for DDoS attacks. UDP is generally preferred over TCP based attacks because TCP requires a connection to be made before any data can be send; if the server or firewall refuses the connection, no data can be sent, thus the attack cannot proceed.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EUDP allows for the client to simply send data to the server without first making a connection, It's similar to the way in which mail reaches your house without your authorizartion, you can do whatever you want with it once you receive it, but you are still going to receive it. This is why software firewalls are useless against UDP attacks, because by the time the packet has reached your server, it's already traveled through your server's datacenter. If the datacenter's router is on a 1gb\/s connection and more than 1gb\/s of UDP packets are being sent, the router is going to be physically unable to process them all, rendering your server inaccessible (regardless of if the server processes the packets or not).\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe basic idea of UDP is to saturate the connection, rather than over-stress the server by sending it too much data. If the attack is powerful enough, it won't even need to reach the server, it can simply overload an upstream device responsible for routing data to the target server (or even that region of the datacenter).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-pWxEUtqvMxY\/VKYiibo_ZrI\/AAAAAAAAA2Q\/PCbcB_oBFmI\/s1600\/DatacenterMap.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-pWxEUtqvMxY\/VKYiibo_ZrI\/AAAAAAAAA2Q\/PCbcB_oBFmI\/s1600\/DatacenterMap.png\" height=\"320\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EThe worst datacenter you ever saw.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIf we consider our hypothetical, inaccurate and oversimplified datacenter: We have a 3 Gb\/s line connecting section 1 of the datacenter to the rest of the network, that 3 Gb\/s line is then split into 3x 1 Gb\/s lines for each of the 3 racks, each rack contains 3 servers, so each 1 Gb\/s line is split into 3x 333 Mb\/s lines. Let's assume all 3 servers in rack 1 have the world's best firewall; it might protect them all from DDoS, but if the attack exceeds 333 MB\/s, the server will be offline regardless, if the attack exceeds 1 Gb\/s the rack will be offline, and if the attack exceeds 3 GB\/s the entire section will be offline. No matter how good the server's firewall is, the server will be offline if the upstream routers cripple under the load, it's theoretically possible to take offline an entire datacenter or even a whole country by sending a large enough attack to one server withing that datacenter\/country.\u003Cbr \/\u003E\u003Cbr \/\u003EMitigation of UDP attacks can only be performed by the datacenter themselves by deploy specialized routers (commonly known as hardware firewalls) at strategical points within the network. The aim is to filter out some of the DDoS at stronger parts of the network, before it reaches the downstream routers. A common method of \"mitigation\" among lazy ISPs is to simply stop routing any traffic to the IP address being attacked (known as null routing), this results in the server being offline until the datacenter staff decide otherwise, meaning the attacker can stop attacking and enjoy a nice nap.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ELayer 7 (Application Layer)\u003C\/h2\u003E\u003Cdiv\u003ELayer 7 DDoS attacks are probably the easiest to carry out in terms of resources needed, because the idea is not to over-saturate the network, but to simply lock up an application on the server. Due to the fact the attack isn't taking offline the whole server, it's easy for the sysadmin to login and begin to mitigation.\u003Cbr \/\u003E\u003Cbr \/\u003EAn example of a Layer 7 attack against a website would be to constantly send GET requests to a page which performs lots of SQL queries; most SQL servers have a limit on the amount of queries they can process at one time, any more and the server will have to start denying requests, preventing legitimate clients from using the website.\u003Cbr \/\u003E\u003Cbr \/\u003EAttackers don't even need to flood the server with requests, it's possible to simply overload the application by maintaining open connections (without sending tonnes of data). Slowloris is an example of such attack where the attacker opens connections to the HTTP server and sends HTTP requests bit by bit, as slowly as possible. The server cannot process a request until it's complete, so it just waits indefinitely until the entire request has been sent; once the maximum number of clients is hit, the server will just ignore any new clients until it's done with the old (of course the old clients are just going to continue adding useless data to the HTTP request, keeping the connection busy for as long as they can).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EDDoS Amplification\u003C\/h2\u003E\u003Cdiv\u003EDDoS amplification is nothing new, it has actually been around so long that Microsoft patched their OS to try and prevent attacks (I'll go over this later). Amplification attacks are nearly always UDP because it does not require a connection, UDP packets operate a lot like a letter in the mail: they have a return address (known as the source address) in which the server will reply to, but as with any letter, there is no guarantee the return address matches that of whoever sent it.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EFor an amplification attack to work, we first need a service that works over UDP and has a response message that is larger than the request message. A good example of this is a DNS query: the request to lookup the DNS is only about 60 bytes, but the UDP DNS response can be as large as 4000 bytes (due to long txt records), that's a 1:67 amplification ratio. All the attacker needs to do is find a DNS that when queried will result in a large response, then send a query to said DNS with the victims IP and the source address, resulting in the DNS server sending the response to the victim instead of the attacker.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-SG6OPn-bWak\/VKZFu9F9GuI\/AAAAAAAAA3I\/OmazlumHgv8\/s1600\/DNSAmplification.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-SG6OPn-bWak\/VKZFu9F9GuI\/AAAAAAAAA3I\/OmazlumHgv8\/s1600\/DNSAmplification.png\" height=\"640\" width=\"554\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EDue to the size different between a DNS request and DNS response, an attacker can easily transform a botnet capable of outputting 1 Gb\/s worth of requests into 60 Gb\/s DDoS attack, this is a huge problem. In order to mitigate these kinds of attacks, Microsoft introduced an update to the windows network stack in XP SP2, which would prevent the system from sending UDP packets with a source address other than its own. Some ISPs took a similar approach by inspecting outgoing UDP packets and dropping any which did not contain a source address owned by the sender. As a result of such measures, Amplified DDoS attacks are primarily sent from linux servers running in a datacenter that does not implement source address verification.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EWho Can Perform DDoS Attacks?\u003C\/h2\u003EIn the past DDoS attacks were only for seasoned hackers with large botnets under their control, due to the fact home computers don't have much bandwidth, requiring hundreds, if not thousands, of them to take offline a single server. Nowadays people can just buy (or hack) servers and use them to perform attacks; a botnet of as little as 2 servers can take offline most website. An attacker doesn't even need to acquire their own servers, there are many services utilizing bought\/hacked servers to perform DDoS attacks for as little as a $5\/month subscription fee. It is also believed that Lizard Squad were able to take offline massive services such as PSN and XBL by abusing the Google Cloud free trial, using the virtual servers as DDoS bots.\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/5412806172924801010\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/distributed-denial-of-service-ddos-for.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5412806172924801010"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5412806172924801010"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2015\/01\/distributed-denial-of-service-ddos-for.html","title":"Distributed Denial Of Service (DDoS) for Beginners"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-pWxEUtqvMxY\/VKYiibo_ZrI\/AAAAAAAAA2Q\/PCbcB_oBFmI\/s72-c\/DatacenterMap.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-3015360047658606405"},"published":{"$t":"2014-12-28T17:00:00.002-08:00"},"updated":{"$t":"2014-12-31T11:00:02.138-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"darkode"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"news"}],"title":{"type":"text","$t":"Darkode - Ode to Lizard Squad (The Rise and Fall of a Private Community)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EFor the 10 of you who don't know, darkode was on of the most active English-speaking \"underground\" cybercrime boards. The forum was started around 2009 by a coder named \"Iserdo\" and gained popularity off the back of Iserdo's bot, \"Buterfly bot\" (AKA Mariposa), which was sold there.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EIn The Beginning\u003C\/h2\u003E\u003Cdiv\u003EWith Iserdo as admin, the main focus of darkode was selling and supporting his products; however, the success of butterfly bot lead to a rapid growth in user-base and quickly darkode became a popular malware marketplace, much sought after by English-speaking cybercriminals. As a result of growing popularity, the forum was turned invite-only and existing members were given a number of invites, which they could give out to whomever they chose. Of course the invite-only model just made membership more sought after and gained darkode a reputation as an elite underground forum. At some point around 2010, Iserdo left and the forum was handed over to Crim (the coder of CrimePack which was one of the early exploit kits), who also gave admin to fubar (the seller of the infamous NgrBot).\u003C\/div\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EAccess Refines\u003C\/h2\u003E\u003Cdiv\u003EIn march 2012 a new access model was announced, the community became layered with \"fresh fish\" (level 0) as the basic membership, and \"Level 1\" (Trusted) as the upgraded membership. For fresh fish access, an applicant would need to be invited by another member, followed by completing an interview with an admin, In order to get level 1 access, existing members would need to prove themselves to the community and if given access, would be able to view\/use the level 1 marketplace, which featured more exclusive products. There was also a special \"Buyer\" level created, which would only allow the user access to the marketplace and not the discussion or coding sections.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-pY-tGVyKlYo\/VKCIrr1KA0I\/AAAAAAAAA04\/AAQ-yXQPyGE\/s1600\/AccessChange.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-pY-tGVyKlYo\/VKCIrr1KA0I\/AAAAAAAAA04\/AAQ-yXQPyGE\/s1600\/AccessChange.png\" height=\"408\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EEventually access was further refined to disallow level 0 users from inviting people, and \u0026nbsp;a level 2 section was created for highly trusted users (and was rumored to allow fraud, which was previously disallowed on the forum).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EThe Great Researcher War\u003C\/h2\u003E\u003Cdiv\u003EWith darkode as a cybercrime hotspot, it's not really a huge surprise that people working in the security industry gained interest in getting access. Researchers such as Xylitol and Brian Krebs dedicated a big part of their blogs to having the inside scoop on darkode, and although admins were very proactive in seeking out and banning security researchers; there was always another hacker to pay off or account to hijack, resulting in numerous threads hating on researcher and Brian Krebs becoming a meme.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-hU3z6kgxwBU\/VKCUD3lW7CI\/AAAAAAAAA1I\/2ttVu5jEw4Y\/s1600\/krabsonsecurity.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-hU3z6kgxwBU\/VKCUD3lW7CI\/AAAAAAAAA1I\/2ttVu5jEw4Y\/s1600\/krabsonsecurity.png\" height=\"226\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe forum began taking more an more precautions to root out security researcher, including mass demoting accounts, banning people who were unknown to them, embedding metadata to identify accounts used to post screenshots, even targeting the researchers directly (\u003Ca href=\"http:\/\/krebsonsecurity.com\/2011\/11\/attemped-malvertising-on-krebsonsecurity-com\/\"\u003Esee here\u003C\/a\u003E), all to no avail.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Z7CAWfjYkvY\/VKCV-QtaqyI\/AAAAAAAAA1U\/txVYcF6yKh8\/s1600\/xylitol.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-Z7CAWfjYkvY\/VKCV-QtaqyI\/AAAAAAAAA1U\/txVYcF6yKh8\/s1600\/xylitol.png\" height=\"178\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EMembers were already getting edgy about posting with so many security researchers on the site, but it wasn't until sp3cial1st was voted for admin in 2013 that the final nail was driven into the darkode coffin. sp3cial1st's approach to researchers was proactive with a touch of paranoia, it started with banning their accounts, then banning the people who invited them, even banning the people who vouched for them, which caused members to stop inviting for fear of getting banned, of course the researchers still found a way back.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EWith the new incredibly proactive anti-researcher strategy, researchers like Krebs would tease the admins with proof of their continued or re-gained access to the site, resulting in frequent pre-preemptive bans of \u0026nbsp;just about any account that seemed remotely whitehat, I even personally witnessed legitimate cybercriminals getting banned for \"being Brian Krebs\". Before long, the only people on darkode were the admins, undercover FBI agents, security researchers, and a few highly trusted members.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ERe-population Attempts\u003C\/h2\u003E\u003Cdiv\u003EWith darkode on life support and still teaming with security researchers, the admin desperately tried to breath new life into the site. After giving out vast numbers of invite codes to the existing member failed, sp3cia1ist started posting threads on hackforums (a scriptkiddie hacking fourm), in order to obtain some interest, when that wasn't enough, he resulted to sending out spam messages embedded with darkode invites to mailing lists that'd been acquired from old hacking forums (this obviously made even the die-hard darkode members doubt their \"prestigious\" position).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-uX_uBDZ7B_s\/VKCa9tN5D5I\/AAAAAAAAA1k\/7LwGL9UIOV8\/s1600\/spam.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"darkode recruitment email\" border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-uX_uBDZ7B_s\/VKCa9tN5D5I\/AAAAAAAAA1k\/7LwGL9UIOV8\/s1600\/spam.png\" height=\"578\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003Edarkode recruitment email\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIt was quite clear that darkode had had its day, but it just didn't stop there. The admin setup a public IRC server under irc.darkode.com where people could come to beg for invites, started posting replies to threads on any forum that made mention of darkode or private forums, even posting comments to entice people in the comment section of krebsonsecurity.com.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-1P3vgTexr0s\/VKCkBY1gskI\/AAAAAAAAA2A\/zRm35Of6_RY\/s1600\/hackforums%2Brecruitment%2Bdrive.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-1P3vgTexr0s\/VKCkBY1gskI\/AAAAAAAAA2A\/zRm35Of6_RY\/s1600\/hackforums%2Brecruitment%2Bdrive.png\" height=\"456\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ESp3cial1st' advertising on hackforums\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ELizard Squad\u003C\/h2\u003E\u003Cdiv\u003EEven I can't explain how darkode got form where it was to here, but we can assume it was for publicity. Around the time LizardSquad became well known by DDoSing just about anything and everything, they decided to follow the same route as lulzsec(setting up a public IRC channel on freenode), unfortunately freenode was having none of this and and banned them, along with everyone in their channel, a few days later. The same week, LizardSquad had relocated to the darkode IRC, which the darkode admin appears to be fine with, he even allowed LizardSquad to spam the darkode url all-over the internet, something that was previously forbidden.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOf course, sharing an IRC only implies the darkode admin tolerated LizardSquad but may not have worked with them. I had noticed that lizardpatrol.com (the official LizardSquad website) was hidden behind cloudflare, so on a hunch I send a HTTP request to the darkode server, with the hostname set to \"lizardpatrol.com\", and what would you know!\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-bS-0UBION7U\/VKChzRf9D8I\/AAAAAAAAA10\/mUqh8AfVCno\/s1600\/lizardpatrol.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-bS-0UBION7U\/VKChzRf9D8I\/AAAAAAAAA10\/mUqh8AfVCno\/s1600\/lizardpatrol.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThat's right, the darkode server is also hosting the official LizardSquad website, oh dear.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/3015360047658606405\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/darkode-ode-to-lizardsquad-rise-and.html#comment-form","title":"8 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3015360047658606405"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3015360047658606405"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/darkode-ode-to-lizardsquad-rise-and.html","title":"Darkode - Ode to Lizard Squad (The Rise and Fall of a Private Community)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-pY-tGVyKlYo\/VKCIrr1KA0I\/AAAAAAAAA04\/AAQ-yXQPyGE\/s72-c\/AccessChange.png","height":"72","width":"72"},"thr$total":{"$t":"8"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-5904150769530102970"},"published":{"$t":"2014-12-23T07:48:00.000-08:00"},"updated":{"$t":"2014-12-23T08:01:14.024-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"botnets"},{"scheme":"http://www.blogger.com/atom/ns#","term":"hacking"},{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"}],"title":{"type":"text","$t":"Phase Bot - Exploiting C\u0026C Panel"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003EI've been withholding this article for a while, due to the fact that the minute I post it all the vulnerabilities will be patched, thus becoming useless to us; however, it turns out hacking all of the phase C\u0026amp;C panels has generated a bit of noise, resulting in the vulnerabilities being found and patched anyway.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003ECaptcha Reuse\u003C\/h2\u003E\u003Cdiv\u003EThis is quite an easy mistake to make for someone not familiar with coding php: when the captcha image is loaded the session variable $_SESSION['captcha'] is set to the captcha code, each time the captcha image is loaded the $_SESSION['captcha'] variable is updated with the new captcha.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-vAvjjX51q2U\/VJl3nKBHqII\/AAAAAAAAAzU\/ji-iNdeKJpg\/s1600\/captcha.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-vAvjjX51q2U\/VJl3nKBHqII\/AAAAAAAAAzU\/ji-iNdeKJpg\/s1600\/captcha.png\" height=\"174\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EOn page load, the browser will perform a GET request to captcha.php, resulting in a new image being returned and the session being updated with the new code.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-sWEKS3fr7IE\/VJl4-cLPFaI\/AAAAAAAAAzg\/h0qVlf0QpHg\/s1600\/captcha1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-sWEKS3fr7IE\/VJl4-cLPFaI\/AAAAAAAAAzg\/h0qVlf0QpHg\/s1600\/captcha1.png\" height=\"186\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe code checks the submitted captcha code with the one stored in the session, unfortunately if the login fails it doesn't destroy the session variable; meaning that as long as you don't perform a GET request to captcha.php, you can reuse the same captcha code indefinitely, allowing login bruteforcing.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EPlaintext Passwords\u003C\/h2\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-TcDvegxyxwY\/VJl8AxphVMI\/AAAAAAAAAz0\/SXVo-AVt4HA\/s1600\/sql.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-TcDvegxyxwY\/VJl8AxphVMI\/AAAAAAAAAz0\/SXVo-AVt4HA\/s1600\/sql.png\" height=\"258\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EObviously, no command and control panel would be complete without storing passwords in plaintext; this isn't a huge issue because there's no way for an outsider to read from the SQL database, right?\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ESQL Inject\u003C\/h2\u003E\u003Cdiv\u003EAnother must have for your budding bot developer, the trusty old SQL injection vulnerability.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-GWvH8Tcr7ik\/VJl9sEH41RI\/AAAAAAAAA0A\/OSZhtXc0RuE\/s1600\/sqlinjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-GWvH8Tcr7ik\/VJl9sEH41RI\/AAAAAAAAA0A\/OSZhtXc0RuE\/s1600\/sqlinjection.png\" height=\"240\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe bot implements are really lame method of supporting reverse HTTP proxies: The proxy will set $_GET[\"i\"] to the urlencoded IP of the bot, which is then input to the database without any sanitization. Sadly, there is no error checking (also popular with bot developers), meaning we can't just output the password (the injection is totally blind).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EWhat we can do, is use boolean logic, that is, we ask the database a question and tell it to do something if the answer is true, and nothing if the answer is false. For example: \"If the first character of the password is 'A', hang for 5 seconds, else do nothing\". If the request takes 5+ seconds to complete, we know the first letter of the password is A. Boolean logic allows us to bruteforce each character of the password separately, which means it will only take about 5 minutes for a 30 character password using mixed case, numbers, and symbols.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAn example SQL query would be:\u0026nbsp;\u003C\/div\u003E\u003Cblockquote class=\"tr_bq\"\u003EIF(SUBSTRING((SELECT value FROM settings WHERE id='2'), 1, 1) = BINARY CHAR('A'), SLEEP(5), 0)\u003C\/blockquote\u003E\u003Cdiv\u003EThe coolest thing about this kind of attack is that if we output each attempt, we get a program that looks like it came out of a lame 90s hacker movie, except it actually works!\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-sQb0cXzUytk\/VJmBASrHYQI\/AAAAAAAAA0M\/SfV2t6RDuqY\/s1600\/90shax.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-sQb0cXzUytk\/VJmBASrHYQI\/AAAAAAAAA0M\/SfV2t6RDuqY\/s1600\/90shax.gif\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EBoth \u003Ca href=\"https:\/\/twitter.com\/Xylit0l\"\u003EXylitol\u003C\/a\u003E and I individually exploited this vulnerability, so I've posted both of our exploits.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/github.com\/MalwareTech\/PhaseHack\/\"\u003ESQL Injection (MalwareTech)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/gist.github.com\/Xyl2k\/fcc7fb1eb4f3a894998e\"\u003ESQL Injection (Xylitol)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!mc5X3aBb!4J-pBipWphmg3Nttp30UUWMtCvul-Apa88CqbF0LO-w\"\u003ETest Panel (Vulnerabilities Intact)\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.kernelmode.info\/forum\/viewtopic.php?f=16\u0026amp;t=3628\u0026amp;start=10#p24706\"\u003EPhase Samples\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAnd of course, nobody uses the same password for their hacking forum account as they do for their botnet panel.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-ZTcvu9rGO9Y\/VJmMtxYiCII\/AAAAAAAAA0c\/84CjyQv4ZmU\/s1600\/passwordreuse.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-ZTcvu9rGO9Y\/VJmMtxYiCII\/AAAAAAAAA0c\/84CjyQv4ZmU\/s1600\/passwordreuse.png\" height=\"286\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/5904150769530102970\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-exploiting-c-panel.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5904150769530102970"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/5904150769530102970"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-exploiting-c-panel.html","title":"Phase Bot - Exploiting C\u0026C Panel"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-vAvjjX51q2U\/VJl3nKBHqII\/AAAAAAAAAzU\/ji-iNdeKJpg\/s72-c\/captcha.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-7347995687245900217"},"published":{"$t":"2014-12-15T07:24:00.000-08:00"},"updated":{"$t":"2014-12-21T09:42:43.695-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ransomware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"OphionLocker Analysis: Proof Anyone Really Can Write Malware"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003EOphionLocker is supposedly the new ransomware on the block and is already being compared with sophisticated operations such as CryptoLocker and CryptoWall, so i decided to take a look and what I found is nothing short of hilarious.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-BnTfH-EX5pA\/VI7t3S9XzSI\/AAAAAAAAAx4\/wCmbmZoeRV4\/s1600\/ConsoleWindow.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-BnTfH-EX5pA\/VI7t3S9XzSI\/AAAAAAAAAx4\/wCmbmZoeRV4\/s1600\/ConsoleWindow.png\" height=\"382\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThat's right, the ransomware is actually a console application, Instead of writing the Win32 application. The developer has opted to use a console application, which implies he is either writing command line tools (he's not), or that he has absolutely no damn idea what he's doing.\u003Cbr \/\u003E\u003Cbr \/\u003EIf there is even any shadow of doubt that this was written by a competent C++ developer, this should set the record straight:\u003Cbr \/\u003E\u003Cbr \/\u003EH:\\\\ConsoleApplication1\\\\Release\\\\ConsoleApplication1.pdb\u003Cbr \/\u003E\u003Cbr \/\u003EThat's the PDB path of this application: \"ConsoleApplicationX\" is the name chosen by Visual Studio when automatically creating a new C++ console project, ConsoleApplication1 implies that this is the first Visual Studio project created; either the developer has just moved from another development environment, or more likely he's never coded C++ before.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-tFsEiWf5_Oc\/VI7wa4Tg19I\/AAAAAAAAAyE\/tm7eAimGzTc\/s1600\/HideWindow.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-tFsEiWf5_Oc\/VI7wa4Tg19I\/AAAAAAAAAyE\/tm7eAimGzTc\/s1600\/HideWindow.png\" height=\"320\" width=\"231\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EThis is a hack to make the console window invisible, as a result the console window will open and then disappear a second later when running the application.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-uO2Ongk1quE\/VI7xOHh0QFI\/AAAAAAAAAyM\/xBsatM1U5yM\/s1600\/Symbols.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-uO2Ongk1quE\/VI7xOHh0QFI\/AAAAAAAAAyM\/xBsatM1U5yM\/s1600\/Symbols.png\" height=\"438\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EIf you're new to programming, writing your own cryptographic library is obviously quite a challenge, as you can see he's opted to just use the Crypto++.\u003Cbr \/\u003E\u003Cbr \/\u003E\"But MalwareTech, even using a public cryptographic library, he'd need to know how to implement it.\"\u003Cbr \/\u003E\u003Cbr \/\u003EWell if we look through the strings in the application, we find the following string: \"ecies.private.key\", which is the name of the file that the application uses to store the private key; this is consistent with the example ECIES (Elliptic Curve Integrated Encryption Scheme) code on the Crypto++ wiki.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/---z0i3c1P1g\/VI70gdz0MqI\/AAAAAAAAAyY\/RKysW4GG74Y\/s1600\/ECIESExample.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/---z0i3c1P1g\/VI70gdz0MqI\/AAAAAAAAAyY\/RKysW4GG74Y\/s1600\/ECIESExample.png\" height=\"260\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThe C\u0026amp;C communicated mechanism is much of the same story, although it could have been implemented with a few lines of code using the WinInet library, the developer has opted to use the insanely bulky HTTP Client library \u003Ca href=\"http:\/\/www.codeproject.com\/Articles\/66625\/A-Fully-Featured-Windows-HTTP-Wrapper-in-C\"\u003EWinHTTPClient\u003C\/a\u003E, which uses the WinHTTP api (should only be used for service and not client applications).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-0hvb5GHpYuM\/VI72hUb-xsI\/AAAAAAAAAyk\/ve3Ll2lk6wE\/s1600\/Copy%26Pasta.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-0hvb5GHpYuM\/VI72hUb-xsI\/AAAAAAAAAyk\/ve3Ll2lk6wE\/s1600\/Copy%26Pasta.png\" height=\"258\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EObviously, no application is complete without some error handling, so here's what happens if the locker fails to connect to the C\u0026amp;C.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-BQYLK6vEkX8\/VI73i9ZEfII\/AAAAAAAAAyw\/zOshbQEs7T0\/s1600\/AppCrash.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-BQYLK6vEkX8\/VI73i9ZEfII\/AAAAAAAAAyw\/zOshbQEs7T0\/s1600\/AppCrash.png\" height=\"498\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EError handling is love, error handling is life.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EGUI programming tends to be quite tricky, but it's nothing you cant achieve with a message box and 300 text files that all say the same thing.\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-ONTbigyTbZc\/VI7808bTd7I\/AAAAAAAAAzE\/XYKiApcFwhE\/s1600\/Message.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-ONTbigyTbZc\/VI7808bTd7I\/AAAAAAAAAzE\/XYKiApcFwhE\/s1600\/Message.png\" height=\"448\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003E\u003Cspan style=\"font-size: small; text-align: left;\"\u003EThis is why we can't have nice things.\u003C\/span\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EConclusion\u003C\/h2\u003EQ: Can you code functional ransomware with absolutely no programming experience whatsoever?\u003Cbr \/\u003EA: Yes.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-_fcdz-ff3g0\/VI74PhRf6rI\/AAAAAAAAAy4\/h-73T0KJXtQ\/s1600\/SoDone.gif\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-_fcdz-ff3g0\/VI74PhRf6rI\/AAAAAAAAAy4\/h-73T0KJXtQ\/s1600\/SoDone.gif\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/md5%20e17da8702b71dfb0ee94dbc9e22eed8d%20sha1%20eb78b7079fabecbec01a23c006227246e78126ab%20sha256%20c1a0173d2300cae92c06b1a8cb344cabe99cf4db56fa9dca93629101c59ce68f\/\"\u003EOphionLocker\u003C\/a\u003E\u003Cbr \/\u003EMD5: e17da8702b71dfb0ee94dbc9e22eed8d\u003Cbr \/\u003ESHA1: eb78b7079fabecbec01a23c006227246e78126ab\u003Cbr \/\u003ESHA256: c1a0173d2300cae92c06b1a8cb344cabe99cf4db56fa9dca93629101c59ce68f\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/7347995687245900217\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/ophionlocker-proof-anyone-really-can.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7347995687245900217"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7347995687245900217"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/ophionlocker-proof-anyone-really-can.html","title":"OphionLocker Analysis: Proof Anyone Really Can Write Malware"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-BnTfH-EX5pA\/VI7t3S9XzSI\/AAAAAAAAAx4\/wCmbmZoeRV4\/s72-c\/ConsoleWindow.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-333906824091956844"},"published":{"$t":"2014-12-14T07:58:00.000-08:00"},"updated":{"$t":"2014-12-14T08:32:29.132-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"news"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Phase Bot - A Fileless Rootkit (Part 2)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EAs I said in the last part of the analysis the sample I had was just a test binary, but now I have some real ones thanks to some help from \u003Ca href=\"https:\/\/twitter.com\/Xylit0l\"\u003E@Xylit0l\u003C\/a\u003E. The new binaries incorporate some much more interesting features which I'll go over in this article.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EReverse Connection\u003C\/h2\u003E\u003Cdiv\u003EAlthough Phase is not a banking Trojan as it only supports standard form grabbing, it does have some banking Trojan features such as Reverse RDP \u0026nbsp;and Reverse SOCKS. The idea behind this is that the RDP or SOCKS daemon on the infected machine connects to the client (the bot master or command and control server), as opposed to the other way round, allowing infected machines behind NAT\/Firewalls to still be used as servers.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EInterestingly, the RDP interface is built into the C\u0026amp;C panel and only allows basic mouse \/ keyboard input; As you'd expect this is very slow and incredibly demanding on the HTTP server.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-EFDS7agbr-8\/VI2dTNxEHfI\/AAAAAAAAAxM\/pzSBTexn39Y\/s1600\/ReverseRDP.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-EFDS7agbr-8\/VI2dTNxEHfI\/AAAAAAAAAxM\/pzSBTexn39Y\/s1600\/ReverseRDP.png\" height=\"520\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EEmbedded Reverse RDP\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EModule Loader\u003C\/h2\u003E\u003Cdiv\u003EThe module loader allows the bot functionality to be extended via paid or 3rd party modules. These modules are uploaded to the panel ready to be installed by the bot, which supports storing modules on disk or in a registry key (registry stored modules are manually loaded into memory and executed by the bot, thus bypassing anti-virus scanners).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-_4nqmrjKwIA\/VI2gI7taIjI\/AAAAAAAAAxY\/dghiQssnlL8\/s1600\/ModuleInstall.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-_4nqmrjKwIA\/VI2gI7taIjI\/AAAAAAAAAxY\/dghiQssnlL8\/s1600\/ModuleInstall.png\" height=\"400\" width=\"265\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EOptions specifying how the bot should handle the module.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EModules\u003C\/h2\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe modules themselves are 32-bit or 64-bit DLLs (depending on the system architecture), they're downloaded from the panel and stored in an RC4 encrypted format either on the disk or in the registry. Even with RC4 encryption, they are very easy to identify and dump due to a static encryption key and format.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-lWMqKwuEQ1I\/VI2lJ91uGyI\/AAAAAAAAAxo\/ybuIf_uhFFo\/s1600\/EncryptedModule.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-lWMqKwuEQ1I\/VI2lJ91uGyI\/AAAAAAAAAxo\/ybuIf_uhFFo\/s1600\/EncryptedModule.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIn the wild we've only found 3 modules (all of which are made by the same developer as Phase).\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Evnc32 - reverse VNC daemon (32-bit).\u003C\/li\u003E\u003Cli\u003Evnc64 - reverse VNC daemon (64-bit).\u003C\/li\u003E\u003Cli\u003Escan32 - Point of Sales Track1\/Track2 stealer (32-bit).\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EAs of writing this both the encrypted and decrypted versions of each module have absolutely no detections on virustotal:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/88493515adffd2528a86698e2f7084dbb79f317b6720762b8b4221e90fe2d8b5\/analysis\/\"\u003Escan32 (Encrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/9bd4d77985b1377ea35611ba3c4b42ad93562eb0f66d88d6cf007a4db1d3cd73\/analysis\/1418570488\/\"\u003Evnc32 (Encrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/1a509646a64451f8683a792c0e92bc96ac544106c5dbe54befe7fb6648bbe141\/analysis\/1418570571\/\"\u003Evnc64 (Encrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/e1988a1876263837ca18b58d69028c3678dc3df51baf1721535df3204481e6a1\/analysis\/1418570463\/\"\u003Escan32 (Decrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/c33f2fdd945d053991e178fa12ab9ffea18f751313a8888c74004cbd680bbd75\/analysis\/1418570576\/\"\u003Evnc32 (Decrypted)\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/www.virustotal.com\/en\/file\/f88d5320b3882108f50d3c234313fe604956c0fc057c75b85cdfc3b8e6e9bfd1\/analysis\/1418570599\/\"\u003Evnc64 (Decrypted)\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003ESamples \u0026amp; Resources\u003C\/h2\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/github.com\/MalwareTech\/PhaseDump\"\u003EPhaseDump (Tool for decrypting Phase modules)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!jBQmEIrb!sh2s6ItAgbeo2X23To4syvIZ0n5VdNyiCcWMQjUWxOw\"\u003EWin32\/Phase\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: 5767b9bf9cb6f2b5259f29dd8b873e36\u003C\/div\u003E\u003Cdiv\u003ESHA1: 6cb74b4e309d80efbe674d3d48376ee1f7e2edda\u003C\/div\u003E\u003Cdiv\u003ESHA256: 3a9f8f9dc215be8bc8d278ab99f5e6bdac2d1732d4a3b536d55696dfe766491a\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!XV4wBA4C!IlWa-lLP8EcaxwVbnKdybxMivR5TKj5YE6a-B82VK_8\"\u003Escan32 (Decrypted)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: 1fa781b2ece5dfa36d51704c81e61e19\u003C\/div\u003E\u003Cdiv\u003ESHA1: d379bf330153c1bf742f59013ea6636e02ff28b4\u003C\/div\u003E\u003Cdiv\u003ESHA256: e1988a1876263837ca18b58d69028c3678dc3df51baf1721535df3204481e6a1\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!SMAXCBqA!hOMEupiWE_gSoyAWTVRq9mxtBWPCJW12lFHMjl0dOys\"\u003Evnc32 (Decrypted)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: 94eefdce643a084f95dd4c91289c3cf0\u003C\/div\u003E\u003Cdiv\u003ESHA1: 0bbd15c31782a23b1252544221c564866975ea7e\u003C\/div\u003E\u003Cdiv\u003ESHA256: c33f2fdd945d053991e178fa12ab9ffea18f751313a8888c74004cbd680bbd75\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/mega.co.nz\/#!iAhHgbSR!OgwoNW1jVwDPHbrF7TfhS7EUhINQU5ASukiK7FoG9tg\"\u003Evnc64 (Decrypted)\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EMD5: d7da422a3d23de95a9c3c969a31430e9\u003C\/div\u003E\u003Cdiv\u003ESHA1: 32bcf2adafc5b189c04619c7c484d77a21861aba\u003C\/div\u003E\u003Cdiv\u003ESHA256: f88d5320b3882108f50d3c234313fe604956c0fc057c75b85cdfc3b8e6e9bfd1\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/333906824091956844\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-fileless-rootkit-part-2.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/333906824091956844"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/333906824091956844"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-fileless-rootkit-part-2.html","title":"Phase Bot - A Fileless Rootkit (Part 2)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-EFDS7agbr-8\/VI2dTNxEHfI\/AAAAAAAAAxM\/pzSBTexn39Y\/s72-c\/ReverseRDP.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-2948762975746904386"},"published":{"$t":"2014-12-11T13:51:00.001-08:00"},"updated":{"$t":"2014-12-14T06:15:54.796-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"news"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"Phase Bot - A Fileless Rootkit (Part 1)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EPhase Bot is a fileless rootkit that went on sale during late October, the bot is fairly cheap ($200) and boasts features such as formgrabbing, ftp stealing, and of course the ability to run without a file. The bot has both a 32-bit binary (Win32\/Phase) and a 64-bit binary (Win64\/Phase), despite the fact that both binaries operate in exactly the same way.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-p1C4QVM2J0U\/VIqvTXEsA6I\/AAAAAAAAAw8\/4PwCCWNBfHQ\/s1600\/SalesThread.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-p1C4QVM2J0U\/VIqvTXEsA6I\/AAAAAAAAAw8\/4PwCCWNBfHQ\/s1600\/SalesThread.png\" height=\"606\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThe first thing you notice when opening it up in IDA is that the AddressOfEntryPoint is 0, this may seem like an error, but it actually isn't. Setting the entry point to 0 means the start of the DOS header is used as the entry point, this is possible because most of the fields following the MZ signature aren't required, and the M (0x4D) Z (0x5A) are actually valid instructions (dec ebp and pop edx respectively). I'm not sure the actual purpose of this trick, but it's interesting nonetheless.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-3jlq770DauU\/VIlrVxzoIRI\/AAAAAAAAAvI\/mZaZ_FyPdig\/s1600\/EntryPoint.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-3jlq770DauU\/VIlrVxzoIRI\/AAAAAAAAAvI\/mZaZ_FyPdig\/s1600\/EntryPoint.png\" height=\"162\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ECancels out the MZ instructions then jumps to real entry point.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EThe real entry point is contained within the first 560 bytes of the only section in the executable, this code is designed to get data stored within the non-essential NT header fields and use it to RC4 decrypt the rest of the section, which contains the 2nd stage (shellcode).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-LNZHL4i6hFU\/VInzqlP3gOI\/AAAAAAAAAvY\/oxqyRTQLo84\/s1600\/RealEntryPoint.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-LNZHL4i6hFU\/VInzqlP3gOI\/AAAAAAAAAvY\/oxqyRTQLo84\/s1600\/RealEntryPoint.png\" height=\"640\" width=\"531\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EMost initialization happens is what appears to be the world longest function; the executable doesn't have an import table so functions are resolved by hash. All the initialized data such as offsets, strings, and function addresses is stored within a large structure which is passed to all functions.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-Fq3I5qk-Xs8\/VIn9FpkGMbI\/AAAAAAAAAvo\/1XVBJJX9PAk\/s1600\/8MileCode.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-Fq3I5qk-Xs8\/VIn9FpkGMbI\/AAAAAAAAAvo\/1XVBJJX9PAk\/s1600\/8MileCode.png\" height=\"400\" width=\"145\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003Ebut does anyone truly know what loops are?\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EOnce initialization is done the bot then check that PowerShell and version 2 of the .net framework is installed: if it is, normal installation continues, if not, it writes the bot code to a file in the startup folder.\u003Cbr \/\u003E\u003Cbr \/\u003EThe malware first creates the registry key \"hkcu\\software\\microsoft\\active setup\\installed components\\{\u0026lt;GUID_STRING\u0026gt;}\", then RC4 encrypts the 2nd stage's shellcode with the key \"Phase\" and writes it under the subkey \"Rc4Encoded32\", afterward the 64-bit shellcode is extracted and written to Rc4Encoded64 subkey, also encrypted with \"Phase\" as the key, a 3rd subkey is created named \"JavaScript\" which contains some JavaScript code.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-leKUqzUGIS8\/VIoEXaJxCuI\/AAAAAAAAAwE\/aUfKTKwc_nE\/s1600\/regkeys.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-leKUqzUGIS8\/VIoEXaJxCuI\/AAAAAAAAAwE\/aUfKTKwc_nE\/s1600\/regkeys.png\" height=\"366\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThe full JavaScript is a bit long to post here, so I've uploaded it to \u003Ca href=\"http:\/\/pastebin.com\/0h8UPLh1\"\u003Epastebin\u003C\/a\u003E. It simply base64 decodes a PowerShell script designed to read and decrypt the shellcode from the Rc4Encoded subkey, then runs; you can find the decoded PowerShell script \u003Ca href=\"http:\/\/pastebin.com\/ifUWMTFf\"\u003Ehere\u003C\/a\u003E\u0026nbsp;(the comments were left in by the author).\u003Cbr \/\u003E\u003Cbr \/\u003EFor the bot to start with the system, a subkey named \"Windows Host Process (RunDll)\" is created under \"hkcu\\software\\microsoft\\windows\\currentVersion\\run\", with the following value:\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003Erundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";eval((new%20ActiveXObject(\"WScript.Shell\")).RegRead(\"HKCU\\\\Software\\\\Microsoft\\\\Active%20Setup\\\\Installed%20Components\\\\{72507C54-3577-4830-815B-310007F6135A}\\\\JavaScript\"));close();\u003C\/blockquote\u003EThis is a trick used by Win32\/Poweliks to get rundll32 to run the code from the JavaScript subkey, which then base64 decode the PowerShell script and runs it with PowerShell.exe, you can read more about this trick\u0026nbsp;\u003Ca href=\"http:\/\/thisissecurity.net\/2014\/08\/20\/poweliks-command-line-confusion\/\"\u003Ehere\u003C\/a\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-haZxkIT05uE\/VIoKS-_rsAI\/AAAAAAAAAwQ\/ZF4C_-TJ7iQ\/s1600\/runkey.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-haZxkIT05uE\/VIoKS-_rsAI\/AAAAAAAAAwQ\/ZF4C_-TJ7iQ\/s1600\/runkey.png\" height=\"354\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThe final stage, which runs from within PowerShell hooks the following functions by overwriting the first instruction with 0xF4 (HLT).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Entdll!NtResumeThread (Inject new processes)\u003C\/li\u003E\u003Cli\u003Entdll!NtReadVirtualMemory (Hide malware's memory)\u003C\/li\u003E\u003Cli\u003Entdll!NtQueryDirectoryFile (Hide file, only if failed fileless installation)\u003C\/li\u003E\u003Cli\u003Ews2_32!send (Data stealer)\u003C\/li\u003E\u003Cli\u003Ewininet!HttpSendRequest (Internet Explorer formgrabber)\u003C\/li\u003E\u003Cli\u003Enss3!PR_Write (Firefox formgrabber)\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003EThe HLT instruction is a privileged instruction which cannot be executed from ring 3, as a result it generates an\u0026nbsp;0xC0000096 Privileged Instruction exception, which the bot picks up and handles using a vectored exception handler. This is the same as standard software breakpoint hooking, but using an invalid instruction instead of int 3.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-PxOQHqekuCg\/VIoRn3-18rI\/AAAAAAAAAws\/-9DrYSgI6is\/s1600\/HookShark.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-PxOQHqekuCg\/VIoRn3-18rI\/AAAAAAAAAws\/-9DrYSgI6is\/s1600\/HookShark.png\" height=\"312\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EAs you can imagine, the executable shows all sorts of malicious signs.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-G8bSvsmmah8\/VIoPx-ZHd6I\/AAAAAAAAAwg\/-qlTzqGh_N0\/s1600\/PEStudio.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-G8bSvsmmah8\/VIoPx-ZHd6I\/AAAAAAAAAwg\/-qlTzqGh_N0\/s1600\/PEStudio.png\" height=\"554\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ENULL AddressOfEntryPoint, missing all data directories, invalid section name.\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EIt should be noted that some of the features advertised appear to be missing and the comments in the PowerShell code suggest that this sample is an early\/testing version. I'll update if I can get hold of a newer version.\u0026nbsp;\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/2948762975746904386\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-fileless-rootkit.html#comment-form","title":"8 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/2948762975746904386"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/2948762975746904386"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/phase-bot-fileless-rootkit.html","title":"Phase Bot - A Fileless Rootkit (Part 1)"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-p1C4QVM2J0U\/VIqvTXEsA6I\/AAAAAAAAAw8\/4PwCCWNBfHQ\/s72-c\/SalesThread.png","height":"72","width":"72"},"thr$total":{"$t":"8"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-3300020214358150161"},"published":{"$t":"2014-12-09T05:06:00.001-08:00"},"updated":{"$t":"2014-12-09T06:20:41.972-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"security"}],"title":{"type":"text","$t":"Zombie Processes as a HIPS Bypass"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EA long long time ago (about 10 years in non-internet time) malware developers only had to worry about signature based detection, which could be\u0026nbsp;easily\u0026nbsp;bypasses with polymorphic droppers or executable encryption. To deal with rapidly evolving malware, capable of evading signature detection, HIPS was created.\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EHIPS (Host-based Intrusion Prevention System), sometimes referred to as Proactive Protection or Proactive Defense, is an anti-malware technique designed to detect malware by behavior, and not its file signature. Using kernel mode callback and hooking, HIPS systems can monitor which functions an executable calls, with which parameters, and in what order. By monitoring executable calls the HIPS can get a decent idea of what the executable is trying to do, Ex: Allocating executable memory in a foreign process, followed by creating a thread that resides in the allocated memory; The process is likely trying to inject code. Once the executable tries to perform an action that is deemed malicious, the system can decide what to do based on how common the application is, if it's signed and by whom. For a malicious executable to escape a HIPS, it would have to trick the system into believing it's a legitimate signed application.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EDue to non-static data within a process, such as absolute addresses, imports, and statically allocated variables; it is not possible to verify the digital signature of a running process. To check a process' signature, the HIPS would have to get the executable file path from the PEB (Process Environment Block) or the section handle, then verify the signature of the file on disk.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EZombie Processes\u003C\/h2\u003E\u003Cdiv\u003EThe concept of zombie processes is pretty simple: we can create a standard Windows process in a suspended state, then write our malicious code to the processes' memory; the PEB and the EPROCESS structures will still be that of the original process, causing the HIPS to see the now malicious process as a legitimate signed executable (this is not RunPE or dynamic forking, because we don't unmap the original executable and replacing it with our malicious one, as thos can be detected in multiple ways). It's basically PE injection, but with less exposure to functions that would allow the HIPS to detect code injection.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003ECreateProcess returns a handle to the created process and its main thread with full access, so we don't have to call OpenProcess or OpenThread.\u003C\/li\u003E\u003Cli\u003EThe main thread is in a suspended state and we know the entry point, so no need to call CreateRemoteThread.\u003C\/li\u003E\u003Cli\u003EModification to a child process is far less suspicious that a foreign one.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EInjecting the Code\u003C\/b\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003EA common practice is to call VirtualAllocEx to allocate memory, then use the returned address to relocate the code ready to run at that address. Once the code has been prepared, it can be written to the process with WriteProcessMemory. This is a terrible idea, every HIPS ever expects malware to do that. A better practice used by newer malware (such as Andromeda and BetaBot) is to create as section, then use NtMapViewOfSection to map the section into both the current process and the target process. It's not really possible to know what address the section will be mapped at before mapping it, so this would cause a problem with code that requires relocation.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003ENtMapViewOfSection actually maps the same physical section into both processes (writing the map of the section in the current process will also write the map in the target process), we can simply map the section into both processes then relocate and write the code to the section in the current process, resulting in it also being written to the target process, no WriteProcessMemory needed!\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EExecuting the Code\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EThere's a few ways to do this, but I'll go over the 2 most common.\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EUse SetThreadContext to change the EAX register (which points to the process entry point) to the entry point of your code.\u003C\/li\u003E\u003Cli\u003EUse WriteProcessMemory to write a jump from the process entry point to your code.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EConclusion\u003C\/h2\u003E\u003Cdiv\u003EOnce the code is running inside the trusted process, it is likely to have far more freedom as to what it can do without triggering antivirus warnings, the PEB, EPROCESS and Section Handle, all still point to the original process.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003EAs always I've included some example code:\u0026nbsp;\u003Ca href=\"https:\/\/github.com\/MalwareTech\/ZombifyProcess\"\u003Ehttps:\/\/github.com\/MalwareTech\/ZombifyProcess\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-cnhP-M83Lx4\/VIbtp6R5kKI\/AAAAAAAAAu4\/YWaahufpndk\/s1600\/processhacker.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-cnhP-M83Lx4\/VIbtp6R5kKI\/AAAAAAAAAu4\/YWaahufpndk\/s1600\/processhacker.png\" height=\"295\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ELike magic!\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/3300020214358150161\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/zombie-processes-as-hips-bypass.html#comment-form","title":"1 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3300020214358150161"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3300020214358150161"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/12\/zombie-processes-as-hips-bypass.html","title":"Zombie Processes as a HIPS Bypass"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-cnhP-M83Lx4\/VIbtp6R5kKI\/AAAAAAAAAu4\/YWaahufpndk\/s72-c\/processhacker.png","height":"72","width":"72"},"thr$total":{"$t":"1"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-7426464646334229143"},"published":{"$t":"2014-11-28T12:21:00.000-08:00"},"updated":{"$t":"2014-11-28T20:43:06.736-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"malware"},{"scheme":"http://www.blogger.com/atom/ns#","term":"programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"windows internals"}],"title":{"type":"text","$t":"Virtual File Systems for Beginners"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EA virtual File System (VFS), sometimes referred to as a Hidden File System, is a storage technique most commonly used by kernel mode malware, usually to store components outside of the existing filesystem. By using a virtual filesystem, malware developers can both bypass antivirus scanners as well as complicating work for forensic experts.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2\u003EFilesystem Basics\u003C\/h2\u003E\u003Cdiv\u003EIf you're running Windows and not using hardware from the 90s, or have your OS installed on a flash drive; chances are, you're using the New Technology File System (NTFS). In order to understand how a VFS benefits malware developers, first we need to dive into a bit of filesystem basics.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-pMcrq54oHWY\/VHfu7ktQslI\/AAAAAAAAAuI\/UTDblL1WQHM\/s1600\/disk%2Blayout.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"NTFS disk layout\" border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-pMcrq54oHWY\/VHfu7ktQslI\/AAAAAAAAAuI\/UTDblL1WQHM\/s1600\/disk%2Blayout.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EIn this example we have a disk containing only one partition (which runs Windows).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EThe Master Boot Record (MBR) gives the system information about the partition, such as its start sector and size.\u003C\/li\u003E\u003Cli\u003EThe Volume Boot Record (VBR) is the primary boot code and will load and Windows bootloader and execute it; The VBR is the first sector within the NTFS partition.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003E$BOOT is the boot area and contains the Windows boot loader.\u003C\/li\u003E\u003Cli\u003E$MFT is the Master File Table and tells the system where to find files within the filesystem.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EAntivirus Scans\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EA full system scan will go through every file in the master file table and scan it, additionally the antivirus can hook the filesystem driver and scan files on creation \/ write. If somebody didn't want a file to be scanned, not adding an entry to the MFT would be a good start. Unfortunately, if sectors within the partition are not referenced by the MFT, they are assumed unused and likely to be overwritten as more files are written to the disk.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EMalware Forensics\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EThere are lots of techniques used when analyzing an infected system; however, looking for new\/modified files is a common starting point for an analyst. To speed up file deletion, the system simply deletes the file's record in the MFT but leaves the actual file intact, this way the sectors can be overwritten by an new file and the system doesn't have to waste time zeroing out the old one. Due to the fact there's going to be random data left by deleted files all over the disk, it's very easy for an encrypted virtual filesystem to hide, further complicating analysis.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EObviously if we can't write directly to free sectors within the partition for fear of them being overwritten, then we're going to have to write our VFS outside of the partition; What makes this possible is the fact that there is unused reserves space on both ends of the disk.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EDisk Basics\u003C\/h2\u003E\u003Cdiv\u003EFor people who are interested in the (very technical) reasons behind the reserved space at the beginning and end of the disk, I suggest reading this section. If you're not interested or easily confused, skip to Virtual File Systems.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-3Twa6XS2x8Y\/VHgA9lbLctI\/AAAAAAAAAuY\/IehUuyLzE9I\/s1600\/hard%2Bdisk%2Bplatter.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"A hard disk platter\" border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-3Twa6XS2x8Y\/VHgA9lbLctI\/AAAAAAAAAuY\/IehUuyLzE9I\/s1600\/hard%2Bdisk%2Bplatter.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003ESpace after the MBR\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EA disk platter is divided into tracks which are divided into sectors; a single sector is 512 bytes in size and there are a fixed number of sectors per a track. As technology advanced the physical size of sectors got smaller so more sectors could be fit onto a single track; however, the MBR field that describes the number of sectors is 6 bits in size, thus can only support numbers 0 - 63, limiting the sectors per track to 63.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EEventually, someone figured out that the the closer to the edge of the disk you get, the longer the tracks are and the more sectors the can hold. Nowadays the number of sectors per a track varies depending on how far away from the spindle the track is, making the sectors per a track field of the MBR totally meaningless; For compatibility reason, disks with more than 63 sectors per a track will just leave the value set at 63, the same goes for SSDs or other media that doesn't have tracks.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EFor optimization reasons when partitioning the disk, the Windows partition manager will read the sectors per track value and align the partition on the track boundary (63 sectors per track vmeans that the MBR will be sector 0 track 0, while the start of the partition will be sector 0 track 1, leaving 62 sectors of unused space between the MBR and first partition). \u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe only problem with aligning the partition to 63 virtual (512kb) sectors is if the disk internally used 4kb sectors, then there's going to be a huge performance penalty because 63 * 512 is not a multiple of 4kb, so the OS will constantly be writing across sector boundaries and wasting time with unnecessary Read-Modify-Write cycles. In Windows Vista and onward Microsoft addresses this issue by starting the partition on the 2048th sector (leaving 1 MB of reserved space and 4kb aligning the partition), nobody is exactly sure why they chose to leave so much space, but when it comes to malware, 1 MB is a lot of storage.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003ESpace at then end of the disk\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003EBecause the space at the start of the disk can be pretty small and isn't guaranteed on GPT systems, the space at the end may be a better bet. When allocating a partition, the Windows partition manager will end the partition before the end of the disk to leave space for dynamic disk information. As it happens, dynamic disks are incredibly rare on most computers because they're only used for software RAID and other black magic, which leave between 1 mb and 100 mb of space at the end of the disk.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EVirtual File System\u003C\/h2\u003E\u003Cdiv\u003EThe location of the Virtual File System depends on the space needed and the system specifications, here's a quick overview of the reserved space.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EStart Of Disk\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cul\u003E\u003Cli\u003EOn XP systems using the MBR partition format you are guaranteed 62 sectors (31.7 KB) of space between the MBR and the first partition.\u003C\/li\u003E\u003Cli\u003EOn Vista+ systems using the MBR partition format\u0026nbsp;you are guaranteed 2047 sectors (1 MB) of space between the MBR and the first\u0026nbsp;partition.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EBecause the GUID Partition Table (GPT) is of variable size and not restricted to 1 sector like the MBR, it is uncertain how much space will be available on systems using the GPT.\u003C\/li\u003E\u003Cli\u003EOther than by the GPT, this space is never used by windows.\u0026nbsp;\u003C\/li\u003E\u003C\/ul\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003EEnd Of Disk\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EBetween 1 MB and 100 MB, there doesn't appear to be any OS specifications for the exact size so the variation is likely to do with disk geometry (Ex: 1 disk track is reserved).\u003C\/li\u003E\u003Cli\u003ESome of the space can be used for dynamic disk information (most system do not use dynamic disks unless using software RAID).\u003C\/li\u003E\u003C\/ul\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EContrary to popular belief, a VFS can be created and accessed by a user mode application, as long as it is running as administrator. To prevent malware from bypassing kernel code signing, raw disk access was \"disabled\" in vista and onward; however, there is an exception for boot sectors and sectors residing outside of the filesystem (both reserved areas reside outside the filesystem), enabling user mode access to the VFS. Although, direct user mode access is possible, most malware tends to manage the VFS from a kernel driver and expose an API to user mode components for reading\/writing via the driver; This allows the VFS to be hidden from normal applications and other drivers.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-UYCq376Am8s\/VHjEJa7a-PI\/AAAAAAAAAuo\/vuqq3nnd8R0\/s1600\/VFS%2Brootkit%2Bdriver.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"VFS driver and disk driver stack\" border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-UYCq376Am8s\/VHjEJa7a-PI\/AAAAAAAAAuo\/vuqq3nnd8R0\/s1600\/VFS%2Brootkit%2Bdriver.png\" height=\"640\" title=\"\" width=\"588\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EIt's quite common for a VFS driver to send requests directly to the lowest level disk driver (the disk miniport), as a result the disk read\/write requests cannot be intercepted by the antivirus or any standard disk monitors, providing better stealth. Although you could write standard files using this method, ntfs.sys handles the NTFS specification, so you'd have to create your own ntfs driver which would be a lot of work especially as NTFS is not fully documented by Microsoft.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EThe actual format of the VFS is entirely dependent on the developer, some have chosen to use FAT32 with RC4 encryption, whilst others use custom file systems with modified encryption algorithms. Almost always the VFS is encrypted in an attempt to make the data look like random leftover bytes and not executables or log files.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EBootkits most commonly use a VFS because it reduces the attack surface to a single point of attack: The infected bootloader reads the rootkit driver from the VFS and loads it into the kernel long before the antivirus, leaving the kernel driver time to install hooks and cover its tracks before the OS even initializes. A bootkit using a VFS driver has only one weakness: The infected boot record; this can be easily resolved by using the bootkit's driver to hook the disk miniport and spoof read\/write requests to the boot sector, tricking the AV into thinking the boot sector contains the original Windows boot code, the same method can also be used to just display empty sectors if something other than the rootkit tries to read the VFS.\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/7426464646334229143\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/11\/virtual-file-systems-for-beginners.html#comment-form","title":"3 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7426464646334229143"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/7426464646334229143"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/11\/virtual-file-systems-for-beginners.html","title":"Virtual File Systems for Beginners"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-pMcrq54oHWY\/VHfu7ktQslI\/AAAAAAAAAuI\/UTDblL1WQHM\/s72-c\/disk%2Blayout.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-3227464800950731549.post-3220119727987082945"},"published":{"$t":"2014-11-21T11:19:00.002-08:00"},"updated":{"$t":"2014-11-23T15:05:28.821-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"exploits"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ms14-066"},{"scheme":"http://www.blogger.com/atom/ns#","term":"reversing"}],"title":{"type":"text","$t":"MS14-066 In Depth Analysis"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EA few days ago I published an article detailing how a second bug, in the schannel TLS handshake handling, could allow an attacker to trigger the DecodeSigAndReverse heap overflow in an application that doesn't support client certificates. I had stated I was not familiar with ECC signatures and was unsure of how to trigger the exploit; However, a few hours research fixed that.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/blog.beyondtrust.com\/triggering-ms14-066\"\u003EBeyondTrust's\u003C\/a\u003E post implies they triggered the overflow by randomly modifying the ECC signature, though I believe this is unlikely and was just a safer alternative to disclosing exactly how to trigger the exploit. It was possible for me to achieve remote code execution with either ASLR or DEP disabled, but on a system with both \u0026nbsp;it would prove quite a challenge, thus I'm not too worried about detailing exactly how to trigger the overflow.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EDecodeSigAndReverse\u003C\/h2\u003EWe already know the function in which the overflow occurs, so I decided to work backwards from there. This function is responsible for decoding the ASN.1 (DER) encoded ECC signature and returning it to be verified.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-c2uoR47CfqA\/VG99ndASilI\/AAAAAAAAApQ\/0tcF-yfBmrY\/s1600\/DecodeSigAndReverse1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"DecodeSigAndReverse assembly code 1\" border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-c2uoR47CfqA\/VG99ndASilI\/AAAAAAAAApQ\/0tcF-yfBmrY\/s1600\/DecodeSigAndReverse1.png\" height=\"427\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThe first thing that is done here is the ECC signature is passed to CryptDecodeObject in order to calculate the total size of the decoded signature, which is used to allocate some memory using SPExternalAlloc (LocalAlloc Wrapper). CryptDecodeObject will always handle the signature correctly, with the returned size being sufficient.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-tIGbWYCXK6c\/VG99otYx-EI\/AAAAAAAAApc\/INk7oeSHoqU\/s1600\/DecodeSigAndReverse2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"DecodeSigAndReverse assembly code 2\" border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-tIGbWYCXK6c\/VG99otYx-EI\/AAAAAAAAApc\/INk7oeSHoqU\/s1600\/DecodeSigAndReverse2.png\" height=\"380\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ECryptDecodeObject is now called again, but this time it is passed a pointer to the allocate memory in which to copy the decoded signature. The \"cmp ebx, 2Fh\" checks the signature type (X509_ECC_SIGNATURE) and will direct the code to the left.\u003Cbr \/\u003E\u003Cbr \/\u003EThe decoded signature is pointed to by an ECC_SIGNATURE header, which is 12 bytes in size an looks something like this.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-yAFvrbdab7I\/VG-BYRpKMjI\/AAAAAAAAAps\/tCjpHKS_rBg\/s1600\/ECC_SIGNATURE.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"CERT_ECC_SIGNATURE structure\" border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-yAFvrbdab7I\/VG-BYRpKMjI\/AAAAAAAAAps\/tCjpHKS_rBg\/s1600\/ECC_SIGNATURE.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EWhat R and S are doesn't really matter here, all we need to know is they are extremely large integers. Our ECC structure now contains the size of each integer and a pointer to where it's stored.\u003Cbr \/\u003E\u003Cbr \/\u003EThe 2 memcpy operations should be pretty obvious now, the first one copies rSize bytes from R to some allocated memory, then the second copies sSize bytes of S to the same memory directly after R; If there's going to be an overflow It's going to be in the second memcpy. What we don't yet know is the size of the destination memory or how it's allocated.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-9xZi-7kuFnk\/VG99nRAAR5I\/AAAAAAAAApU\/XCk21dFnd5M\/s1600\/CheckClientVerifyMessage.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"CheckClientVerifyMessage assembly code\" border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-9xZi-7kuFnk\/VG99nRAAR5I\/AAAAAAAAApU\/XCk21dFnd5M\/s1600\/CheckClientVerifyMessage.png\" height=\"500\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EAll I had to do to find where the memory gets allocated was to look at the call graph, find the function responsible for coding DecodeSigAndReverse, then scout it for the \"Dst\" parameter.\u003Cbr \/\u003E\u003Cbr \/\u003EThis is where everything goes right (or wrong if you're Microsoft). _BCryptGetProperty is being passed \"KeyLength\" to... Drum roll please.... get the key length. Directly below that length is being divided by 8 (converted from bits to bytes) then doubled; this is due to the fact the signature length is (should be) double the key length. Just before the call to DecodeSigAndReverse we can see that the destination buffer is also allocated on the heap.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-tIGbWYCXK6c\/VG99otYx-EI\/AAAAAAAAApc\/INk7oeSHoqU\/s1600\/DecodeSigAndReverse2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"DecodeSigAndReverse assembly code 2\" border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-tIGbWYCXK6c\/VG99otYx-EI\/AAAAAAAAApc\/INk7oeSHoqU\/s1600\/DecodeSigAndReverse2.png\" height=\"380\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ESo back at the 2 memcpys now with knowledge of the destination buffer size, we can see exactly what triggers the heap overflow. If we use a key size of 256 bit (32 bytes), then the function is expecting a 512 bit (64 byte) signature, any more will overflow the heap and when it's freed cause a crash.\u003Cbr \/\u003E\u003Cbr \/\u003EThere are very few constraints on the signature, due to the fact the whole thing is just 2 massive integers. As long as we maintain a valid ASN.1 (DER) encoding and the signature is of valid size, we can write arbitrary data to the heap header resulting in an access violation or even remote code execution when the system tries to free the memory.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.malwaretech.com\/feeds\/3220119727987082945\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/11\/ms14-066-in-depth-analysis.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3220119727987082945"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/3227464800950731549\/posts\/default\/3220119727987082945"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.malwaretech.com\/2014\/11\/ms14-066-in-depth-analysis.html","title":"MS14-066 In Depth Analysis"}],"author":[{"name":{"$t":"Malware Tech"},"uri":{"$t":"https:\/\/plus.google.com\/113787010938798722584"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh6.googleusercontent.com\/-VzkVgdcfAWY\/AAAAAAAAAAI\/AAAAAAAAAq0\/2jeT8feXaE0\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/3.bp.blogspot.com\/-c2uoR47CfqA\/VG99ndASilI\/AAAAAAAAApQ\/0tcF-yfBmrY\/s72-c\/DecodeSigAndReverse1.png","height":"72","width":"72"},"thr$total":{"$t":"0"}}]}});